extend type Query {
  watchmenWatchmenAll(
    currentStaff: Boolean,
    currentRole: Boolean
  ): [WatchmenWatchman!]! @staffonly
  watchmenGradesAll: [WatchmenGrade!]! @staffonly
  watchmenShifts(from_date: String!, to_date: String!): [WatchmenShift!]! @staffonly
}

extend type Mutation {
  watchmenCreateWatchman(params: WatchmenCreateWatchmanInput!): Boolean @auth(permission: "watchmen.manage")
  watchmenUpdateShift(params: WatchmenUpdateShiftInput!): WatchmenShift! @auth(permission: "watchmen.manage")
  watchmenSetWatchmanPriority(params: WatchmenSetWatchmanPriorityInput!): Boolean @auth(permission: "watchmen.manage")
  watchmenSetWatchmanGrade(params: WatchmenSetWatchmanGradeInput!): Boolean @auth(permission: "watchmen.manage")
}

input WatchmenCreateWatchmanInput {
  email: String!
  short_name: String!
  full_name: String!
  password: String!
  vk: String
  gender: String!
  skip_wiki: Boolean
  skip_cm_customer: Boolean
  skip_cm_user: Boolean
}

type WatchmenGrade {
  id: ID!
  code: String!
  multiplier: Float!
}

input WatchmenSetWatchmanGradeInput {
  watchman_id: ID!
  grade_id: ID!
}

input WatchmenSetWatchmanPriorityInput {
  watchman_id: ID!
  priority: Int!
}

type WatchmenShift {
  date: String!
  shift: String!
  watchman: WatchmenWatchman
  is_night: Boolean!
}

input WatchmenUpdateShiftInput {
  date: String!
  shift: String!
  watchman_id: ID
  is_night: Boolean
}

type WatchmenWatchman {
  id: ID!
  member: StaffMember!
  grade: WatchmenGrade
  priority: Int!
}
