# Generated by Django 3.2.4 on 2021-06-06 18:17

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import kocherga.django.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtailmath.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('kocherga_wagtail', '0001_squash_2021'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailcore', '0062_comment_models_and_pagesubscription'),
        ('yandex_kassa', '0001_squash_2021'),
    ]

    operations = [
        migrations.CreateModel(
            name='NotebookIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('kocherga_wagtail.kochergapage',),
        ),
        migrations.CreateModel(
            name='NotebookPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('sections', wagtail.core.fields.StreamField([('ratio_notebook_section', wagtail.core.blocks.PageChooserBlock(page_type=['ratio.SectionPage']))])),
            ],
            options={
                'verbose_name': 'Рабочая тетрадь',
                'verbose_name_plural': 'Рабочие тетради',
            },
            bases=('kocherga_wagtail.kochergapage',),
        ),
        migrations.CreateModel(
            name='PresentationIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Список рацио-презентаций',
                'verbose_name_plural': 'Списки рацио-презентаций',
            },
            bases=('kocherga_wagtail.kochergapage',),
        ),
        migrations.CreateModel(
            name='Promocode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('code', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(message='Promocode must include only A-Z or 0-9 characters', regex='^[A-Z0-9]+$')], verbose_name='Промокод')),
                ('discount', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Сумма скидки')),
                ('discount_percent', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Процент скидки')),
                ('uses_max', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Максимальное количество использований')),
                ('uses_count', models.IntegerField(default=0, editable=False, verbose_name='Количество использований')),
                ('for_email', models.EmailField(blank=True, max_length=254, verbose_name="Создан для E-mail'а")),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='SectionIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Список рацио-секций',
                'verbose_name_plural': 'Списки рацио-секций',
            },
            bases=('kocherga_wagtail.kochergapage',),
        ),
        migrations.CreateModel(
            name='SectionPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.core.fields.StreamField([('ratio_header', wagtail.core.blocks.CharBlock(form_classname='full title', group='Текст', icon='title', label='Заголовок')), ('ratio_paragraph', wagtail.core.blocks.RichTextBlock(group='Текст', label='Текст')), ('ratio_inset', wagtail.core.blocks.RichTextBlock(group='Текст', icon='placeholder', label='Врезка')), ('ratio_exercise', wagtail.core.blocks.StructBlock([('header', wagtail.core.blocks.CharBlock(label='Задание')), ('lines_count', wagtail.core.blocks.IntegerBlock(label='Число строк')), ('enumerate', wagtail.core.blocks.BooleanBlock(default=True, label='Нумеровать строки', required=False))], group='Упражнение', icon='list-ol', label='Задание со строками')), ('ratio_exercise_oneline', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(label='Задание'))], group='Упражнение', icon='horizontalrule', label='Задание с одним полем')), ('ratio_briefing', wagtail.core.blocks.RichTextBlock(icon='home', label='Вводная часть')), ('ratio_math', wagtailmath.blocks.MathBlock(label='Формула'))])),
                ('status', models.CharField(choices=[('test', 'Тест'), ('placeholder', 'Заглушка'), ('in_progress', 'В разработке'), ('editing', 'Редактура'), ('ready', 'Готово')], default='placeholder', max_length=40, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Рацио-секция',
                'verbose_name_plural': 'Рацио-секции',
            },
            bases=('kocherga_wagtail.kochergapage',),
        ),
        migrations.CreateModel(
            name='TestimonialProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=80)),
                ('color', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator('^#[0-9a-f]{6}$')])),
                ('link', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'Продукт для отзыва',
                'verbose_name_plural': 'Продукты для отзывов',
            },
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.SlugField(unique=True)),
                ('training_type', models.SlugField(blank=True)),
                ('date', models.DateField(blank=True, null=True, verbose_name='Дата начала')),
                ('telegram_link', models.URLField(blank=True, verbose_name='Телеграм-чат')),
                ('pre_survey_link', models.URLField(blank=True, verbose_name='Форма предрассылки')),
                ('post_survey_link', models.URLField(blank=True, verbose_name='Форма пострассылки')),
                ('gdrive_link', models.URLField(blank=True, verbose_name='Материалы')),
                ('mailchimp_interest_id', models.CharField(blank=True, max_length=20, verbose_name='ID Mailchimp-группы')),
                ('post_survey_collected', models.BooleanField(default=False)),
                ('salaries_paid', models.BooleanField(default=False)),
                ('discount_by_email', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Сумма скидки одноразового промокода по E-mail'у")),
                ('discount_percent_by_email', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="Процент скдики одноразового промокода по E-mail'у")),
                ('promocode_email', models.CharField(blank=True, choices=[('notion-template', 'notion-template')], max_length=40)),
                ('new_ticket_email', models.CharField(choices=[('training', 'training'), ('wait-for-notion', 'wait-for-notion')], default='training', max_length=40)),
                ('notion_created_email', models.CharField(blank=True, choices=[('notion-template', 'notion-template')], max_length=40)),
                ('promocodes', models.ManyToManyField(related_name='trainings', to='ratio.Promocode')),
            ],
            options={
                'verbose_name': 'Тренинг',
                'verbose_name_plural': 'Тренинги',
                'ordering': ['-date'],
                'permissions': (('manage', 'Может управлять тренингами'),),
            },
        ),
        migrations.CreateModel(
            name='TrainingDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='ratio.training', verbose_name='Тренинг')),
            ],
            options={
                'verbose_name': 'День тренинга',
                'verbose_name_plural': 'Дни тренинга',
                'ordering': ('date',),
                'unique_together': {('date', 'training')},
            },
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=40, verbose_name='Короткое имя')),
                ('long_name', models.CharField(max_length=255, verbose_name='Длинное имя')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ratio_trainer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Тренер',
                'verbose_name_plural': 'Тренеры',
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', kocherga.django.fields.ShortUUIDField(default=kocherga.django.fields.generate_uuid, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('price', models.IntegerField(verbose_name='Стоимость')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('discount_by_email', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Сумма скидки одноразового промокода по E-mail'у")),
                ('discount_percent_by_email', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="Процент скдики одноразового промокода по E-mail'у")),
                ('promocodes', models.ManyToManyField(related_name='ticket_type_promocodes', to='ratio.Promocode')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ticket_types', to='ratio.training')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Фамилия')),
                ('registration_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата регистрации')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('status', models.CharField(choices=[('normal', 'Участник'), ('canceled', 'Отказ')], default='normal', max_length=40, verbose_name='Статус')),
                ('ticket_class', models.CharField(choices=[('normal', 'Обычный'), ('stipend', 'Стипендия'), ('staff', 'Стафф'), ('replacement', 'Замена (заменяет другого участника)'), ('carry-over', 'Перенос (с прошлого мероприятия)'), ('free-repeat', 'Бесплатный повтор')], default='normal', max_length=40, verbose_name='Тип билета')),
                ('payment_amount', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='Размер оплаты')),
                ('comment', models.TextField(blank=True)),
                ('notion_link', models.URLField(blank=True)),
                ('ticket_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='ratio.tickettype')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='ratio.training', verbose_name='Тренинг')),
            ],
            options={
                'verbose_name': 'Участник',
                'verbose_name_plural': 'Участники',
                'ordering': ['-created'],
                'unique_together': {('training', 'email')},
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('author_name', models.CharField(max_length=80)),
                ('author_description', models.CharField(blank=True, max_length=1024)),
                ('text', wagtail.core.fields.RichTextField()),
                ('author_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='kocherga_wagtail.customimage')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='testimonials', to='ratio.testimonialproduct')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Размер оплаты')),
                ('payment_type', models.CharField(choices=[('kassa', 'Яндекс.Касса'), ('kassa_invoice', 'Счёт Яндекс.Кассы'), ('transfer', 'Перевод'), ('cash', 'Наличные'), ('paypal', 'PayPal'), ('timepad', 'Timepad'), ('other', 'Другое')], max_length=40, verbose_name='Вид оплаты')),
                ('status', models.CharField(choices=[('todo', 'Не оплачен'), ('paid', 'Оплачен'), ('canceled', 'Отменён')], default='todo', max_length=40, verbose_name='Статус')),
                ('fiscalization_status', models.CharField(choices=[('todo', 'todo'), ('not_needed', 'not_needed'), ('in_progress', 'in_progress'), ('fiscalized', 'fiscalized')], max_length=40, verbose_name='Статус фискального чека')),
                ('comment', models.TextField(blank=True)),
                ('custom_kkm_title', models.CharField(blank=True, max_length=255, verbose_name='Кастомный заголовок для чека')),
                ('kassa_payment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ratio_payment', to='yandex_kassa.payment')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='ratio.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', kocherga.django.fields.ShortUUIDField(default=kocherga.django.fields.generate_uuid, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('fulfilled', models.BooleanField(default=False)),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Фамилия')),
                ('city', models.CharField(blank=True, max_length=255, verbose_name='Город')),
                ('payer_email', models.EmailField(blank=True, default='', max_length=254)),
                ('payer_first_name', models.EmailField(blank=True, default='', max_length=254)),
                ('payer_last_name', models.EmailField(blank=True, default='', max_length=254)),
                ('payment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='ratio_order', to='yandex_kassa.payment', verbose_name='Платёж')),
                ('promocode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='ratio.promocode')),
                ('ticket_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='ratio.tickettype')),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TimeField(verbose_name='Время')),
                ('activity_type', models.CharField(choices=[('section', 'Секция'), ('break', 'Перерыв'), ('bonus', 'Бонус')], max_length=40, verbose_name='Тип')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('location', models.CharField(blank=True, max_length=255, verbose_name='Локация')),
                ('trainer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='ratio.trainer', verbose_name='Ведущий')),
                ('training_day', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='ratio.trainingday')),
            ],
            options={
                'verbose_name': 'Активность',
                'verbose_name_plural': 'Активности',
                'ordering': ('training_day__training__date', 'training_day__date', 'time'),
            },
        ),
    ]
