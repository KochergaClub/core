extend type Query {
  events(search: String, before: String, after: String, first: Int, last: Int): EventsEventConnection! @staffonly
  event(event_id: ID!): EventsEvent @staffonly
}

type EventsEventConnection {
  pageInfo: PageInfo!
  edges: [EventsEventEdge!]!
  nodes: [EventsEvent!]!
}

type EventsEventEdge {
  node: EventsEvent!
}

type EventsEvent {
  event_id: ID!  # uuid field, renamed for client
  title: String!
  start: String!

  visitors: String @staffonly

  # all EventsEvent are staff-only, but this can change in the future
  tickets: [EventsTicket!]! @staffonly
}

type EventsTicket {
  id: ID!
  status: String!
  user: AuthUser!
}

extend type Query {
  eventsPrototype(id: ID!): EventsPrototype! @staffonly
  eventsPrototypes: [EventsPrototype!]! @staffonly
}

type EventsPrototype {
  id: ID!
  title: String!
  summary: String!
  description: String!
  location: String!
  timing_description_override: String!
  active: Boolean!
  weekday: Int!
  hour: Int!
  minute: Int!
  length: Int!
  project: ProjectPage
  tags: [String!]!
  image(spec: String!): WagtailImage
  suggested_dates(until_ts: Int, limit: Int!): [String!]!
  instances(limit: Int): [EventsEvent!]! @staffonly
  vk_group: VkGroup
  timepad_category: TimepadCategory
}

extend type Query {
  vkGroups: [VkGroup!]! @staffonly
}

type VkGroup {
  name: String!
}

extend type Query {
  timepadCategories: [TimepadCategory!]! @staffonly
}

type TimepadCategory {
  id: ID!
  code: String!
  name: String!
}

extend type Query {
  publicEvents(from_date: String, project_id: ID, before: String, after: String, first: Int, last: Int): EventsPublicEventConnection!
  publicEvent(event_id: ID!): EventsPublicEvent!
}

type EventsPublicEventConnection {
  pageInfo: PageInfo!
  edges: [EventsPublicEventEdge!]!
  nodes: [EventsPublicEvent!]!
}

type EventsPublicEventEdge {
  node: EventsPublicEvent!
}

type EventsPublicEvent {
  event_id: ID!
  start: String!
  end: String!

  title: String!
  summary: String!
  description: String!
  image: String

  registration_type: String!
  pricing_type: String!
  realm: String!

  project: ProjectPage
  announcements: EventsAnnouncements!

  # note that there's no @auth directive - we don't want any errors if user is not authenticated
  my_ticket: MyEventsTicket
}

type EventsAnnouncements {
  timepad: EventsTimepadAnnouncement
}

type EventsTimepadAnnouncement {
  link: String!
}

extend type My {
  tickets(before: String, after: String, first: Int, last: Int): MyEventsTicketConnection! @auth(authenticated: true)
}

type MyEventsTicket {
  event: EventsPublicEvent!
  status: String!
  created: String
  zoom_link: String
}

type MyEventsTicketEdge {
  node: MyEventsTicket!
}

type MyEventsTicketConnection {
  pageInfo: PageInfo!
  edges: [MyEventsTicketEdge!]!
  nodes: [MyEventsTicket!]!
}

extend type Mutation {
  myEventsTicketUnregister(event_id: ID!): MyEventsTicket! @auth(authenticated: true)
  myEventsTicketRegister(event_id: ID!): MyEventsTicket! @auth(authenticated: true)
  myEventsTicketRegisterAnon(input: MyEventsTicketRegisterAnonInput!): MyEventsTicket!
}

input MyEventsTicketRegisterAnonInput {
  event_id: ID!
  email: String!
  subscribed_to_newsletter: Boolean
}

extend type Mutation {
  eventSetRealm(input: EventSetRealmInput!): EventSetRealmResult! @staffonly
}

input EventSetRealmInput {
  event_id: ID!
  realm: String!
}

type EventSetRealmResult {
  ok: Boolean
}

extend type Mutation {
  eventSetPricingType(input: EventSetPricingTypeInput!): EventSetPricingTypeResult! @staffonly
}

input EventSetPricingTypeInput {
  event_id: ID!
  pricing_type: String!
}

type EventSetPricingTypeResult {
  ok: Boolean
}

extend type Mutation {
  eventSetZoomLink(input: EventSetZoomLinkInput!): EventSetZoomLinkResult! @staffonly
}

input EventSetZoomLinkInput {
  event_id: ID!
  zoom_link: String!
}

type EventSetZoomLinkResult {
  ok: Boolean
}

extend type Mutation {
  eventPrototypeCreate(input: EventPrototypeCreateInput!): EventPrototypeCreateResult! @staffonly
}

input EventPrototypeCreateInput {
  title: String!
  location: String
  weekday: Int!
  hour: Int!
  minute: Int!
  length: Int!
}

type EventPrototypeCreateResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventPrototypeUpdate(input: EventPrototypeUpdateInput!): EventPrototypeUpdateResult! @staffonly
}

input EventPrototypeUpdateInput {
  id: ID!
  title: String
  summary: String
  description: String
  timing_description_override: String
  location: String
  active: Boolean
  weekday: Int
  hour: Int
  minute: Int
  length: Int
  project_slug: String
  vk_group_name: String
  timepad_category_code: String
}

type EventPrototypeUpdateResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventPrototypeCancelDate(input: EventPrototypeCancelDateInput!): EventPrototypeCancelDateResult! @staffonly
}

input EventPrototypeCancelDateInput {
  id: ID!
  date: String!
}

type EventPrototypeCancelDateResult {
  ok: Boolean
}

extend type Mutation {
  eventPrototypeNewEvent(input: EventPrototypeNewEventInput!): EventPrototypeNewEventResult! @staffonly
}

input EventPrototypeNewEventInput {
  id: ID!
  ts: Int!
}

type EventPrototypeNewEventResult {
  ok: Boolean
}

extend type Mutation {
  eventPrototypeAddTag(input: EventPrototypeAddTagInput!): EventPrototypeAddTagResult! @staffonly
}

input EventPrototypeAddTagInput {
  id: ID!
  tag: String!
}

type EventPrototypeAddTagResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventPrototypeDeleteTag(input: EventPrototypeDeleteTagInput!): EventPrototypeDeleteTagResult! @staffonly
}

input EventPrototypeDeleteTagInput {
  id: ID!
  tag: String!
}

type EventPrototypeDeleteTagResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventPrototypeSetImage(input: EventPrototypeSetImageInput!): EventPrototypeSetImageResult! @staffonly
}

input EventPrototypeSetImageInput {
  id: ID!
  image_id: ID!
}

type EventPrototypeSetImageResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventGenerateZoomLink(input: EventGenerateZoomLinkInput!): EventGenerateZoomLinkResult! @staffonly
}

input EventGenerateZoomLinkInput {
  event_id: ID!
}

type EventGenerateZoomLinkResult {
  ok: Boolean
}
