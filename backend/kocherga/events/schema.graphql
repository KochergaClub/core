extend type Query {
  events(
    search: String
    filter: EventsFilterInput
    before: String
    after: String
    first: Int
    last: Int
  ): EventsEventConnection! @staffonly
  event(event_id: ID!): EventsEvent @staffonly
}

input EventsFilterInput {
  event_type: String
}

type EventsEventConnection {
  pageInfo: PageInfo!
  edges: [EventsEventEdge!]!
  nodes: [EventsEvent!]!
}

type EventsEventEdge {
  node: EventsEvent!
}

type EventsEvent {
  id: ID! # uuid field, renamed for client
  event_id: ID! # deprecated
  title: String!
  description: String!
  summary: String!
  timing_description_override: String!

  location: String!
  room: String! # normalized location
  zoom_link: String!
  zoom_meeting: ZoomMeeting

  start: String!
  end: String!
  created: String!
  updated: String!
  published: Boolean!
  creator: String

  event_type: String!
  pricing_type: String!
  registration_type: String!
  realm: String!

  visitors: String @staffonly

  tags: [String!]! @staffonly

  image(spec: String!): WagtailImageRendition

  prototype: EventsPrototype
  project: ProjectPage

  announcements: EventsAnnouncements!

  # all EventsEvent are staff-only, but this can change in the future
  tickets: [EventsTicket!]! @staffonly
  feedbacks: [EventsFeedback!]! @staffonly
}

type EventsAnnouncements {
  timepad: EventsAnnouncementTimepad!
  vk: EventsAnnouncementVk!
  fb: EventsAnnouncementFb!
}

type EventsAnnouncementTimepad {
  link: String!
  category_code: String!
  prepaid_tickets: Boolean!
}

type EventsAnnouncementVk {
  link: String!
  group: String!
  image(spec: String!): WagtailImageRendition @staffonly
}

type EventsAnnouncementFb {
  link: String!
  group: String!
}

type EventsFeedback {
  id: ID!
  overall_score: Int
  recommend_score: Int
  content_score: Int
  conductor_score: Int

  source_friend: Boolean!
  source_vk: Boolean!
  source_fb: Boolean!
  source_timepad: Boolean!
  source_email: Boolean!
  source_website: Boolean!

  custom_source: String
  comment: String
}

type EventsTicket {
  id: ID!
  status: String!
  user: AuthUser!
}

extend type Query {
  eventsPrototype(id: ID!): EventsPrototype! @staffonly
  eventsPrototypes: [EventsPrototype!]! @staffonly
}

type EventsPrototype {
  id: ID!
  title: String!
  summary: String!
  description: String!
  location: String!
  timing_description_override: String!
  active: Boolean!
  weekday: Int!
  hour: Int!
  minute: Int!
  length: Int!
  project: ProjectPage
  tags: [String!]!
  image(spec: String!): WagtailImageRendition
  suggested_dates(until_ts: Int, limit: Int!): [String!]!
  instances(limit: Int): [EventsEvent!]! @staffonly
  vk_group: VkGroup
  timepad_category: TimepadCategory
}

extend type Query {
  vkGroups: [VkGroup!]! @staffonly
}

type VkGroup {
  name: String!
}

extend type Query {
  timepadCategories: [TimepadCategory!]! @staffonly
}

type TimepadCategory {
  id: ID!
  code: String!
  name: String!
}

extend type Query {
  publicEvents(
    from_date: String
    project_id: ID
    before: String
    after: String
    first: Int
    last: Int
  ): EventsPublicEventConnection!
  publicEvent(event_id: ID!): EventsPublicEvent!
}

type EventsPublicEventConnection {
  pageInfo: PageInfo!
  edges: [EventsPublicEventEdge!]!
  nodes: [EventsPublicEvent!]!
}

type EventsPublicEventEdge {
  node: EventsPublicEvent!
}

type EventsPublicEvent {
  event_id: ID!
  start: String!
  end: String!

  title: String!
  summary: String!
  description: String!
  image: String # deprecated, links to original image
  image_rendition(spec: String!): WagtailImageRendition

  registration_type: String!
  pricing_type: String!
  realm: String!

  project: ProjectPage
  announcements: EventsAnnouncements!

  # note that there's no @auth directive - we don't want any errors if user is not authenticated
  my_ticket: MyEventsTicket
}

extend type My {
  tickets(
    before: String
    after: String
    first: Int
    last: Int
  ): MyEventsTicketConnection! @auth(authenticated: true)
}

type MyEventsTicket {
  event: EventsPublicEvent!
  status: String!
  created: String
  zoom_link: String
}

type MyEventsTicketEdge {
  node: MyEventsTicket!
}

type MyEventsTicketConnection {
  pageInfo: PageInfo!
  edges: [MyEventsTicketEdge!]!
  nodes: [MyEventsTicket!]!
}

extend type Mutation {
  myEventsTicketUnregister(event_id: ID!): MyEventsTicket!
    @auth(authenticated: true)
  myEventsTicketRegister(event_id: ID!): MyEventsTicket!
    @auth(authenticated: true)
  myEventsTicketRegisterAnon(
    input: MyEventsTicketRegisterAnonInput!
  ): MyEventsTicket!
}

input MyEventsTicketRegisterAnonInput {
  event_id: ID!
  email: String!
  subscribed_to_newsletter: Boolean
}

extend type Mutation {
  eventUpdate(input: EventUpdateInput!): EventUpdateResult! @staffonly
}

input EventUpdateInput {
  event_id: ID!
  start: String
  end: String
  published: Boolean
  visitors: String
  title: String
  description: String
  summary: String
  event_type: String
  registration_type: String
  pricing_type: String
  realm: String
  timing_description_override: String
  location: String
  zoom_link: String
  prototype_id: ID
  project_slug: String
  image_id: ID
}

type EventUpdateResult {
  ok: Boolean
  event: EventsEvent!
}

extend type Mutation {
  eventCreate(input: EventCreateInput!): EventCreateResult! @staffonly
}

input EventCreateInput {
  start: String!
  end: String!
  title: String!
  description: String
  location: String
}

type EventCreateResult {
  ok: Boolean
  event: EventsEvent!
}

extend type Mutation {
  eventDelete(input: EventDeleteInput!): BasicResult! @staffonly
}

input EventDeleteInput {
  event_id: ID!
}

extend type Mutation {
  eventSetEventType(input: EventSetEventTypeInput!): EventUpdateResult!
    @staffonly
}

input EventSetEventTypeInput {
  event_id: ID!
  event_type: String!
}

extend type Mutation {
  eventSetRealm(input: EventSetRealmInput!): EventUpdateResult! @staffonly
}

input EventSetRealmInput {
  event_id: ID!
  realm: String!
}

extend type Mutation {
  eventSetPricingType(input: EventSetPricingTypeInput!): EventUpdateResult!
    @staffonly
}

input EventSetPricingTypeInput {
  event_id: ID!
  pricing_type: String!
}

extend type Mutation {
  eventSetZoomLink(input: EventSetZoomLinkInput!): EventUpdateResult! @staffonly
}

input EventSetZoomLinkInput {
  event_id: ID!
  zoom_link: String!
}

extend type Mutation {
  eventPrototypeCreate(
    input: EventPrototypeCreateInput!
  ): EventPrototypeCreateResult! @staffonly
}

input EventPrototypeCreateInput {
  title: String!
  summary: String
  description: String
  timing_description_override: String
  location: String
  weekday: Int!
  hour: Int!
  minute: Int!
  length: Int!
  project_slug: String
  vk_group_name: String
  timepad_category_code: String
}

type EventPrototypeCreateResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventPrototypeUpdate(
    input: EventPrototypeUpdateInput!
  ): EventPrototypeUpdateResult! @staffonly
}

input EventPrototypeUpdateInput {
  id: ID!
  title: String
  summary: String
  description: String
  timing_description_override: String
  location: String
  active: Boolean
  weekday: Int
  hour: Int
  minute: Int
  length: Int
  project_slug: String
  vk_group_name: String
  timepad_category_code: String
}

type EventPrototypeUpdateResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventPrototypeCancelDate(
    input: EventPrototypeCancelDateInput!
  ): EventPrototypeCancelDateResult! @staffonly
}

input EventPrototypeCancelDateInput {
  id: ID!
  date: String!
}

type EventPrototypeCancelDateResult {
  ok: Boolean
}

extend type Mutation {
  eventPrototypeNewEvent(
    input: EventPrototypeNewEventInput!
  ): EventPrototypeNewEventResult! @staffonly
}

input EventPrototypeNewEventInput {
  id: ID!
  ts: Int!
}

type EventPrototypeNewEventResult {
  ok: Boolean
}

extend type Mutation {
  eventPrototypeAddTag(
    input: EventPrototypeAddTagInput!
  ): EventPrototypeAddTagResult! @staffonly
}

input EventPrototypeAddTagInput {
  id: ID!
  tag: String!
}

type EventPrototypeAddTagResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventPrototypeDeleteTag(
    input: EventPrototypeDeleteTagInput!
  ): EventPrototypeDeleteTagResult! @staffonly
}

input EventPrototypeDeleteTagInput {
  id: ID!
  tag: String!
}

type EventPrototypeDeleteTagResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventPrototypeSetImage(
    input: EventPrototypeSetImageInput!
  ): EventPrototypeSetImageResult! @staffonly
}

input EventPrototypeSetImageInput {
  id: ID!
  image_id: ID!
}

type EventPrototypeSetImageResult {
  ok: Boolean
  prototype: EventsPrototype!
}

extend type Mutation {
  eventGenerateZoomLink(input: EventGenerateZoomLinkInput!): EventUpdateResult!
    @staffonly
}

input EventGenerateZoomLinkInput {
  event_id: ID!
}

extend type Mutation {
  eventAddTag(input: EventAddTagInput!): EventUpdateResult! @staffonly
}

input EventAddTagInput {
  event_id: ID!
  tag: String!
}

extend type Mutation {
  eventDeleteTag(input: EventDeleteTagInput!): EventUpdateResult! @staffonly
}

input EventDeleteTagInput {
  event_id: ID!
  tag: String!
}

extend type Mutation {
  eventSetImageFromUrl(input: EventSetImageFromUrlInput!): EventUpdateResult!
    @staffonly
}

input EventSetImageFromUrlInput {
  event_id: ID!
  url: String!
}

extend type Mutation {
  eventVkAnnouncementSetImage(
    input: EventVkAnnouncementSetImageInput!
  ): EventUpdateResult! @staffonly
}

input EventVkAnnouncementSetImageInput {
  event_id: ID!
  image_id: ID!
}

enum EventAnnounceTarget {
  VK
  FB
  TIMEPAD
}

extend type Mutation {
  eventAnnounce(input: EventAnnounceInput!): EventUpdateResult! @staffonly
}

input EventAnnounceInput {
  event_id: ID!
  target: EventAnnounceTarget!
}

extend type Mutation {
  eventSetAnnounceUrl(input: EventSetAnnounceUrlInput!): EventUpdateResult!
    @staffonly
}

input EventSetAnnounceUrlInput {
  event_id: ID!
  target: EventAnnounceTarget!
  url: String!
}

extend type Mutation {
  eventTimepadAnnouncementUpdate(
    input: EventTimepadAnnouncementUpdateInput!
  ): EventUpdateResult! @staffonly
}

input EventTimepadAnnouncementUpdateInput {
  event_id: ID!
  prepaid_tickets: Boolean
  category_code: String
}

extend type Mutation {
  eventVkAnnouncementUpdate(
    input: EventVkAnnouncementUpdateInput!
  ): EventUpdateResult! @staffonly
}

input EventVkAnnouncementUpdateInput {
  event_id: ID!
  group: String
}

extend type Mutation {
  eventMove(input: EventMoveInput!): EventUpdateResult! @staffonly
}

input EventMoveInput {
  event_id: ID!
  start: String!
}

extend type Query {
  eventsWeeklyDigestCurrent: EventsWeeklyDigest! @staffonly
}

type EventsWeeklyDigest {
  id: ID!
  start: String
  image(spec: String!): WagtailImageRendition!
  mailchimp: EventsWeeklyDigestMailchimp!
  telegram: EventsWeeklyDigestTelegram!
  vk: EventsWeeklyDigestVk!
}

type EventsWeeklyDigestMailchimp {
  link: String
}

type EventsWeeklyDigestTelegram {
  link: String
}

type EventsWeeklyDigestVk {
  link: String
}

type EventsWeeklyDigestUpdateResult {
  ok: Boolean
  digest: EventsWeeklyDigest!
}

extend type Mutation {
  eventsWeeklyDigestPostVk: EventsWeeklyDigestUpdateResult! @staffonly
}

extend type Mutation {
  eventsWeeklyDigestPostTelegram: EventsWeeklyDigestUpdateResult! @staffonly
}

extend type Mutation {
  eventsWeeklyDigestPostMailchimp(
    input: EventsWeeklyDigestPostMailchimpInput
  ): EventsWeeklyDigestUpdateResult! @staffonly
}

input EventsWeeklyDigestPostMailchimpInput {
  text: String
}

extend type Mutation {
  vkWikiScheduleUpdate: BasicResult @staffonly
}

extend type Mutation {
  eventsFeedbackCreate(
    input: EventsFeedbackCreateInput
  ): EventsFeedbackCreateResult! @staffonly
}

input EventsFeedbackCreateInput {
  event_id: ID!

  overall_score: Int
  recommend_score: Int
  content_score: Int
  conductor_score: Int

  source_friend: Boolean!
  source_vk: Boolean!
  source_fb: Boolean!
  source_timepad: Boolean!
  source_email: Boolean!
  source_website: Boolean!

  custom_source: String
  comment: String
}

type EventsFeedbackCreateResult {
  ok: Boolean
  feedback: EventsFeedback!
}

extend type Mutation {
  eventsFeedbackDelete(input: EventsFeedbackDeleteInput): BasicResult!
    @staffonly
}

input EventsFeedbackDeleteInput {
  id: ID!
}

extend type Subscription {
  events: EventNotification! @staffonly
}

type EventNotification {
  type: String!
  id: ID!
}

extend type Query {
  eventsPublicGoogleCalendar: EventsGoogleCalendar
}

type EventsGoogleCalendar {
  id: ID!
  url: String!
}
