# Generated by Django 3.2.4 on 2021-06-06 18:17

import django.core.validators
from django.db import migrations, models
import kocherga.events.models.event
import kocherga.events.models.feedback
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': [('manage', 'Can manage events and related objects')],
                'managed': False,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.SlugField(default=kocherga.events.models.event.generate_uuid, unique=True)),
                ('start', models.DateTimeField(db_index=True)),
                ('end', models.DateTimeField(db_index=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('creator', models.CharField(blank=True, max_length=255, null=True)),
                ('invite_creator', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=255)),
                ('summary', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('deleted', models.BooleanField(default=False)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('visitors', models.CharField(blank=True, max_length=100, null=True)),
                ('asked_for_visitors', models.DateTimeField(blank=True, null=True)),
                ('event_type', models.CharField(choices=[('public', 'public'), ('private', 'private'), ('unknown', 'unknown')], default='public', max_length=40)),
                ('registration_type', models.CharField(choices=[('native', 'native'), ('timepad', 'timepad')], default='native', max_length=20)),
                ('pricing_type', models.CharField(choices=[('anticafe', 'anticafe'), ('free', 'free')], default='free', max_length=20)),
                ('realm', models.CharField(choices=[('offline', 'offline'), ('online', 'online')], default='online', max_length=40)),
                ('zoom_link', models.URLField(blank=True, max_length=255)),
                ('published', models.BooleanField(default=False)),
                ('timing_description_override', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
                'db_table': 'events',
                'ordering': ['start'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='EventPrototype',
            fields=[
                ('prototype_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('summary', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('timing_description_override', models.CharField(blank=True, max_length=255)),
                ('vk_group', models.CharField(blank=True, max_length=40)),
                ('fb_group', models.CharField(blank=True, max_length=40)),
                ('timepad_category_code', models.CharField(blank=True, max_length=40)),
                ('timepad_prepaid_tickets', models.BooleanField(default=False)),
                ('weekday', models.IntegerField()),
                ('hour', models.IntegerField()),
                ('minute', models.IntegerField()),
                ('length', models.IntegerField()),
                ('active', models.BooleanField(default=True)),
                ('canceled_dates', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Прототип события',
                'verbose_name_plural': 'Прототипы событий',
                'db_table': 'event_prototypes',
            },
        ),
        migrations.CreateModel(
            name='EventPrototypeTag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'event_prototype_tags',
            },
        ),
        migrations.CreateModel(
            name='FbAnnouncement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(blank=True, max_length=1024)),
                ('group', models.CharField(blank=True, max_length=40)),
                ('added_to_main_page', models.BooleanField(default=False)),
                ('shared_to_main_page', models.BooleanField(default=False)),
                ('error_screenshot', models.ImageField(blank=True, null=True, upload_to='events/announcement/fb/error_screenshot/')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', kocherga.events.models.feedback.ScoreField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Насколько вам понравилось мероприятие в целом?')),
                ('recommend_score', kocherga.events.models.feedback.ScoreField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Насколько вероятно, что вы порекомендуете такое мероприятие знакомым?')),
                ('content_score', kocherga.events.models.feedback.ScoreField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Насколько вам было интересно содержание?')),
                ('conductor_score', kocherga.events.models.feedback.ScoreField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Насколько вы довольны работой ведущих?')),
                ('source_friend', models.BooleanField(verbose_name='Откуда / Знакомые')),
                ('source_vk', models.BooleanField(verbose_name='Откуда / ВКонтакте')),
                ('source_fb', models.BooleanField(verbose_name='Откуда / Facebook')),
                ('source_timepad', models.BooleanField(verbose_name='Откуда / Timepad')),
                ('source_email', models.BooleanField(verbose_name='Откуда / Почтовая рассылка')),
                ('source_website', models.BooleanField(verbose_name='Откуда / Сайт Кочерги')),
                ('custom_source', models.CharField(blank=True, max_length=1024, verbose_name='Откуда вы узнали про мероприятие? (свой вариант)')),
                ('comment', models.TextField(blank=True, verbose_name='Что можно улучшить?')),
            ],
        ),
        migrations.CreateModel(
            name='GoogleCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calendar_id', models.CharField(db_index=True, max_length=100)),
                ('public_only', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='GoogleEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_id', models.CharField(max_length=100, unique=True)),
                ('html_link', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
                'db_table': 'event_tags',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(choices=[('ok', 'ОК'), ('inactive', 'Отказ')], default='ok', max_length=20)),
                ('subscribed_to_newsletter', models.BooleanField(default=False)),
                ('day_before_notification_sent', models.BooleanField(default=False)),
                ('from_timepad', models.BooleanField(default=False)),
            ],
            options={
                'permissions': (('view_tickets', 'Может смотреть все билеты'),),
            },
        ),
        migrations.CreateModel(
            name='TimepadAnnouncement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(blank=True, max_length=1024)),
                ('category_code', models.CharField(blank=True, max_length=40)),
                ('prepaid_tickets', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='VkAnnouncement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(blank=True, max_length=1024)),
                ('group', models.CharField(blank=True, max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyDigest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(verbose_name='Дата начала недели')),
                ('mailchimp_id', models.CharField(blank=True, max_length=100, verbose_name='ID кампании в Mailchimp')),
                ('mailchimp_sent', models.BooleanField(default=False, verbose_name='Mailchimp-кампания отправлена')),
                ('telegram_id', models.CharField(blank=True, max_length=100, verbose_name='ID сообщения в Telegram')),
                ('vk_id', models.CharField(blank=True, max_length=100, verbose_name='ID поста в VK')),
            ],
        ),
    ]
