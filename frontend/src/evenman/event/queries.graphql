fragment EventsEvent_Summary on Event {
  id
  title
  start
  published
  event_type
  announcements {
    timepad {
      link
    }
    vk {
      link
    }
    fb {
      link
    }
  }
}

query EvenmanEvents($start: String!, $end: String!) {
  events(after: $start, before: $end, first: 100) {
    nodes {
      ...EventsEvent_Summary
    }
  }
}

fragment EvenmanUnknownEvent on Event {
  id
  title
}

query EvenmanUnknownEvents {
  events(filter: { event_type: "unknown" }, first: 20) {
    nodes {
      ...EvenmanUnknownEvent
    }
  }
}

fragment EvenmanEvent_Details on Event {
  id
  created
  start
  end

  title
  summary
  description(format: SOURCE)
  timing_description_override

  location
  zoom_link
  zoom_meeting {
    id
    participants_count
  }

  event_type
  pricing_type
  registration_type
  realm

  visitors
  tags

  image(spec: "width-240") {
    id
    url
  }

  imageForVkBackground: image(spec: "width-1100") {
    url
  }

  prototype {
    id
  }

  project {
    meta {
      slug
    }
  }

  published
  announcements {
    timepad {
      link
      category_code
      prepaid_tickets
    }
    vk {
      link
      group
      image(spec: "width-240") {
        url
      }
    }
    fb {
      link
      group
    }
  }

  tickets {
    id
  }
}

query EvenmanEvent($id: ID!) {
  event(event_id: $id) {
    ...EvenmanEvent_Details
  }
}

mutation EvenmanSetEventType($id: ID!, $event_type: String!) {
  result: eventSetEventType(input: { event_id: $id, event_type: $event_type }) {
    ok
    event {
      id
      event_type
    }
  }
}

mutation EvenmanSetZoomLink($id: ID!, $link: String!) {
  result: eventSetZoomLink(input: { event_id: $id, zoom_link: $link }) {
    ok
    event {
      id
      zoom_link
    }
  }
}

mutation EvenmanGenerateZoomLink($id: ID!) {
  result: eventGenerateZoomLink(input: { event_id: $id }) {
    ok
    event {
      id
      zoom_link
    }
  }
}

mutation EvenmanUpdate(
  $id: ID!
  $published: Boolean
  $visitors: String
  $title: String
  $description: String
  $summary: String
  $event_type: String
  $registration_type: String
  $pricing_type: String
  $realm: String
  $location: String
  $prototype_id: ID
  $project_slug: String
  $timing_description_override: String
  $image_id: ID
) {
  result: eventUpdate(
    input: {
      event_id: $id
      published: $published
      visitors: $visitors
      title: $title
      description: $description
      summary: $summary
      event_type: $event_type
      registration_type: $registration_type
      pricing_type: $pricing_type
      realm: $realm
      location: $location
      prototype_id: $prototype_id
      project_slug: $project_slug
      timing_description_override: $timing_description_override
      image_id: $image_id
    }
  ) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanEventDelete($id: ID!) {
  result: eventDelete(input: { event_id: $id }) {
    ok
  }
}

mutation EvenmanEventAddTag($id: ID!, $tag: String!) {
  result: eventAddTag(input: { event_id: $id, tag: $tag }) {
    ok
    event {
      id
      tags
    }
  }
}

mutation EvenmanEventDeleteTag($id: ID!, $tag: String!) {
  result: eventDeleteTag(input: { event_id: $id, tag: $tag }) {
    ok
    event {
      id
      tags
    }
  }
}

mutation EvenmanEventSetImageFromUrl($id: ID!, $url: String!) {
  result: eventSetImageFromUrl(input: { event_id: $id, url: $url }) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanVkAnnouncementSetImage($event_id: ID!, $image_id: ID!) {
  result: eventVkAnnouncementSetImage(
    input: { event_id: $event_id, image_id: $image_id }
  ) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanAnnounce($event_id: ID!, $target: EventAnnounceTarget!) {
  result: eventAnnounce(input: { event_id: $event_id, target: $target }) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanSetAnnounceUrl(
  $event_id: ID!
  $target: EventAnnounceTarget!
  $url: String!
) {
  result: eventSetAnnounceUrl(
    input: { event_id: $event_id, target: $target, url: $url }
  ) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanEventMove($event_id: ID!, $start: String!) {
  result: eventMove(input: { event_id: $event_id, start: $start }) {
    ok
    event {
      id
      start
      end
    }
  }
}

mutation EvenmanEventCreate($title: String!, $start: String!, $end: String!) {
  result: eventCreate(input: { title: $title, start: $start, end: $end }) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

subscription onEvents {
  events {
    type
    id
  }
}

query EvenmanPrototypesForPicker {
  prototypes: eventsPrototypes {
    id
    title
  }
}
