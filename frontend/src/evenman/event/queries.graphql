fragment EventsEvent_Summary on Event {
  id
  title
  start
  published
  event_type
  announcements {
    timepad {
      link
    }
    vk {
      link
    }
    fb {
      link
    }
  }
}

query EvenmanEvents($start: String!, $end: String!) {
  events(after: $start, before: $end, first: 100) {
    nodes {
      ...EventsEvent_Summary
    }
  }
}

fragment EvenmanUnknownEvent on Event {
  id
  title
}

query EvenmanUnknownEvents {
  events(filter: { event_type: "unknown" }, first: 20) {
    nodes {
      ...EvenmanUnknownEvent
    }
  }
}

fragment EvenmanEvent_Details on Event {
  id
  created
  start
  end

  title
  summary
  description(format: SOURCE)
  timing_description_override

  location
  zoom_link
  zoom_meeting {
    id
    participants_count
  }

  event_type
  pricing_type
  registration_type
  realm

  visitors
  tags

  image(spec: "width-240") {
    id
    url
    original_image {
      ...WagtailImage_ForEditor
    }
  }

  imageForVkBackground: image(spec: "width-1100") {
    id
    url
  }

  prototype {
    id
  }

  project {
    meta {
      slug
    }
  }

  published
  announcements {
    timepad {
      link
      category_code
      prepaid_tickets
    }
    vk {
      link
      group
      image(spec: "width-240") {
        id
        url
        original_image {
          ...WagtailImage_ForEditor
        }
      }
    }
    fb {
      link
      group
    }
  }

  tickets {
    id
  }
}

query EvenmanEvent($id: ID!) {
  event(event_id: $id) {
    ...EvenmanEvent_Details
  }
}

mutation EvenmanGenerateZoomLink($id: ID!) {
  result: eventGenerateZoomLink(input: { event_id: $id }) {
    ok
    event {
      id
      zoom_link
    }
  }
}

mutation EvenmanUpdate($input: EventUpdateInput!) {
  result: eventUpdate(input: $input) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanEventDelete($id: ID!) {
  result: eventDelete(input: { event_id: $id }) {
    ok
  }
}

mutation EvenmanEventAddTag($id: ID!, $tag: String!) {
  result: eventAddTag(input: { event_id: $id, tag: $tag }) {
    ok
    event {
      id
      tags
    }
  }
}

mutation EvenmanEventDeleteTag($id: ID!, $tag: String!) {
  result: eventDeleteTag(input: { event_id: $id, tag: $tag }) {
    ok
    event {
      id
      tags
    }
  }
}

mutation EvenmanVkAnnouncementSetImage($event_id: ID!, $image_id: ID!) {
  result: eventVkAnnouncementSetImage(
    input: { event_id: $event_id, image_id: $image_id }
  ) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanAnnounce($event_id: ID!, $target: EventAnnounceTarget!) {
  result: eventAnnounce(input: { event_id: $event_id, target: $target }) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanSetAnnounceUrl(
  $event_id: ID!
  $target: EventAnnounceTarget!
  $url: String!
) {
  result: eventSetAnnounceUrl(
    input: { event_id: $event_id, target: $target, url: $url }
  ) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

mutation EvenmanEventMove($event_id: ID!, $start: String!) {
  result: eventMove(input: { event_id: $event_id, start: $start }) {
    ok
    event {
      id
      start
      end
    }
  }
}

mutation EvenmanEventCreate($title: String!, $start: String!, $end: String!) {
  result: eventCreate(input: { title: $title, start: $start, end: $end }) {
    ok
    event {
      ...EvenmanEvent_Details
    }
  }
}

subscription onEvents {
  events {
    type
    id
  }
}

query EvenmanPrototypesForPicker {
  prototypes: eventsPrototypes {
    id
    title
  }
}
