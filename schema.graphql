type WagtailStructBlockStructure implements WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
  child_blocks: [WagtailStructBlockChildStructure!]!
}

interface WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
}

type WagtailStructBlockChildStructure {
  name: String!
  definition: WagtailBlockStructure!
}

type WagtailListBlockStructure implements WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
  child_block: WagtailBlockStructure!
}

type WagtailCharBlockStructure implements WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
}

type WagtailRichTextBlockStructure implements WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
}

type WagtailBooleanBlockStructure implements WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
}

type WagtailStaticBlockStructure implements WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
}

type WagtailImageBlockStructure implements WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
}

type WagtailURLBlockStructure implements WagtailBlockStructure {
  label: String!
  group: String
  required: Boolean!
}

type WagtailStructBlockValidationError implements WagtailBlockValidationError {
  error_message: String!
  errors: [WagtailStructBlockFieldValidationError!]!
}

interface WagtailBlockValidationError {
  error_message: String!
}

type WagtailStructBlockFieldValidationError {
  name: String!
  error: WagtailBlockValidationError
}

type WagtailListBlockValidationError implements WagtailBlockValidationError {
  error_message: String!
  errors: [WagtailBlockValidationError]!
}

type WagtailAnyBlockValidationError implements WagtailBlockValidationError {
  error_message: String!
}

type RatioPresentationIndexPage implements WagtailPage {
  title: String!
  id: ID!
  meta: WagtailPageMeta!
  presentations: [PresentationPage!]!
}

interface WagtailPage {
  id: ID!
  title: String!
  meta: WagtailPageMeta!
}

type WagtailPageMeta {
  slug: String!
  description: String!
  html_url: String! @deprecated(reason: "renamed to `url`")
  url: String!
  permissions: WagtailPagePermissions!
  revisions: [WagtailPageRevision!]!
  revision(id: ID!): WagtailPageRevision!
}

type WagtailPagePermissions {
  can_edit: Boolean!
}

type WagtailPageRevision {
  id: ID!
  created_at: String!
  as_page: WagtailPage!
}

type RatioSectionPage implements WagtailPage {
  title: String!
  id: ID!
  meta: WagtailPageMeta!
  body: [WagtailBlock!]!
}

interface WagtailBlock {
  id: ID!
}

type RatioSectionIndexPage implements WagtailPage {
  title: String!
  id: ID!
  meta: WagtailPageMeta!
}

type RatioNotebookPage implements WagtailPage {
  title: String!
  id: ID!
  meta: WagtailPageMeta!
  sections: [RatioNotebookSectionBlock!]!
}

type RatioNotebookIndexPage implements WagtailPage {
  title: String!
  id: ID!
  meta: WagtailPageMeta!
}

type RatioNotebookSectionBlock implements WagtailBlock {
  id: ID!
  value: RatioSectionPage!
}

type RatioHeaderBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type RatioParagraphBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type RatioInsetBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type RatioExerciseBlock implements WagtailBlock {
  id: ID!
  value: RatioExerciseBlockValue!
}

type RatioExerciseBlockValue {
  header: String!
  lines_count: Int!
  enumerate: Boolean!
}

type RatioExerciseOnelineBlock implements WagtailBlock {
  id: ID!
  value: RatioExerciseOnelineBlockValue!
}

type RatioExerciseOnelineBlockValue {
  text: String!
}

type RatioBriefingBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type RatioMathBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type ProjectPage implements WagtailPage {
  id: ID!

  """заголовок"""
  title: String!
  meta: WagtailPageMeta!

  """Короткое описание"""
  summary: String!

  """Периодичность"""
  activity_summary: String

  """Активный"""
  is_active: Boolean!
  body: String!
  image(spec: String!): WagtailImageRendition!
  upcoming_events: [Event!]!
  telegram_chats: [TelegramChat!]!
}

type WagtailImageRendition {
  id: ID!
  url: String!
  width: Int!
  height: Int!
  original_image: WagtailImage!
}

type WagtailImage {
  id: ID!
  url: String!
  width: Int!
  height: Int!
  rendition(spec: String!): WagtailImageRendition!
}

type Event {
  start: String!
  end: String!
  title: String!
  summary: String!
  registration_type: String!
  pricing_type: String!
  realm: String!
  published: Boolean!
  event_type: String!
  id: ID!
  event_id: ID!
  description(format: EventsMarkupFormat): String!
  stream_body: [WagtailBlock!]!
  image(spec: String!): WagtailImageRendition
  project: ProjectPage
  public_tags: [String!]!
  announcements: EventsAnnouncements!
  my_ticket: MyEventsTicket
  tags: [String!]!
  public_google_event: EventsGoogleEvent
  zoom_meeting: ZoomMeeting
  prototype: EventsPrototype
  visitors: String
  creator: String
  created: String!
  updated: String!
  location: String!
  room: String!
  zoom_link: String!
  timing_description_override: String!
  tickets: [EventsTicket!]!
  feedbacks: [EventsFeedback!]!
  youtube_videos: [EventsYoutubeVideo!]!
}

enum EventsMarkupFormat {
  SOURCE
  PLAIN
}

type EventsAnnouncements {
  timepad: EventsAnnouncementTimepad!
  vk: EventsAnnouncementVk!
  fb: EventsAnnouncementFb!
}

type EventsAnnouncementTimepad {
  link: String!
  category_code: String!
  prepaid_tickets: Boolean!
}

type EventsAnnouncementVk {
  link: String!
  group: String!
  image(spec: String!): WagtailImageRendition
}

type EventsAnnouncementFb {
  link: String!
  group: String!
}

type MyEventsTicket {
  id: ID!
  event: Event!
  status: String!
  created: String
  zoom_link: String
}

type EventsGoogleEvent {
  google_id: String!
  html_link: String!
  id: ID!
}

type ZoomMeeting {
  id: ID!
  zoom_id: String!
  join_url: String!
  instances: [ZoomMeetingInstance!]!
  participants_count: Int
}

type ZoomMeetingInstance {
  id: ID!
  zoom_uuid: String!
  start_time: String!
  end_time: String!
  participants: [ZoomParticipant!]!
}

type ZoomParticipant {
  id: ID!
  name: String!
  join_time: String!
  leave_time: String!
}

type EventsPrototype {
  id: ID!
  title: String!
  summary: String!
  description: String!
  location: String!
  timing_description_override: String!
  active: Boolean!
  weekday: Int!
  hour: Int!
  minute: Int!
  length: Int!
  project: ProjectPage
  tags: [String!]!
  image(spec: String!): WagtailImageRendition
  suggested_dates(limit: Int!, from_date: String, to_date: String, until_ts: Int): [String!]!
  instances(limit: Int): [Event!]!
  vk_group: VkGroup
  timepad_category: TimepadCategory
}

type VkGroup {
  name: String!
}

type TimepadCategory {
  id: ID!
  code: String!
  name: String!
}

type EventsTicket {
  id: ID!
  status: String!
  user: AuthUser!
}

type AuthUser {
  id: ID!
  first_name: String!
  last_name: String!
  email: String
  staff_member: StaffMember
  external_accounts: [ExternalServiceAccount!]!
}

type StaffMember {
  id: ID!
  short_name: String!
  full_name: String!
  role: String!
  is_current: Boolean!
  vk: String!
  color: String!
  user: AuthUser!
  slack_user: SlackUser
}

type SlackUser {
  slack_id: String!
  image_url: String!
}

interface ExternalServiceAccount {
  service: ExternalService!
}

interface ExternalService {
  slug: String!
  accounts: [ExternalServiceAccount!]!
}

type EventsFeedback {
  id: ID!
  overall_score: Int
  recommend_score: Int
  content_score: Int
  conductor_score: Int
  source_friend: Boolean!
  source_vk: Boolean!
  source_fb: Boolean!
  source_timepad: Boolean!
  source_email: Boolean!
  source_website: Boolean!
  custom_source: String
  comment: String
}

type EventsYoutubeVideo {
  id: ID!
  embed_id: String!
}

type TelegramChat {
  id: ID!
  username: String!
  title: String!
  force_public: Boolean!
  delisted: Boolean!
  photo(spec: String!): WagtailImageRendition
  project: ProjectPage
  link: String!
}

type ProjectIndexPage implements WagtailPage {
  id: ID!

  """заголовок"""
  title: String!
  meta: WagtailPageMeta!

  """Описание активных проектов"""
  active_description: String!
  projects(is_active: Boolean): [ProjectPage!]!
}

type FreeFormPage implements WagtailPage {
  title: String!
  id: ID!
  meta: WagtailPageMeta!
  body: [WagtailBlock!]!
}

type FolderPage implements WagtailPage {
  title: String!
  id: ID!
  meta: WagtailPageMeta!
}

type BasicTextBlock implements WagtailBlock {
  id: ID!
  value: BasicTextBlockValue!
}

type BasicTextBlockValue {
  text: String!
  centered: Boolean!
}

type BasicCardBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type SectionHeaderBlock implements WagtailBlock {
  id: ID!
  value: SectionHeaderBlockValue!
}

type SectionHeaderBlockValue {
  header: String!
  text: String!
}

type AnchorBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type ColumnsBasicBlock implements WagtailBlock {
  id: ID!
  value: [ColumnsBasicBlockValue!]!
}

type ColumnsBasicBlockValue {
  header: String!
  text: String!
}

type ColumnsButtonsBlock implements WagtailBlock {
  id: ID!
  value: [ColumnsButtonsBlockValue!]!
}

type ColumnsButtonsBlockValue {
  title: String!
  text: String!
  image(spec: String!): WagtailImageRendition!
  caption: String!
  link: String!
}

type ImageWithTextBlock implements WagtailBlock {
  id: ID!
  value: ImageWithTextBlockValue!
}

type ImageWithTextBlockValue {
  text: String!
  image(spec: String!): WagtailImageRendition!
}

type BigContactsBlock implements WagtailBlock {
  id: ID!
  value: BigContactsBlockValue!
}

type BigContactsBlockValue {
  map: WagtailGeo!
  address: String!
  phone: String!
  email: String!
  text: String!
}

type WagtailGeo {
  lat: String!
  lng: String!
}

type MailchimpSubscribeBlock implements WagtailBlock {
  id: ID!
  value: MailchimpSubscribeBlockValue!
}

type MailchimpSubscribeBlockValue {
  news: Boolean!
  events: Boolean!
  trainings: Boolean!
}

type HeroFrontBlock implements WagtailBlock {
  id: ID!
  value: HeroFrontBlockValue!
}

type HeroFrontBlockValue {
  title: String!
  buttons: [HeroFrontBlock_buttonsValue!]!
}

type HeroFrontBlock_buttonsValue {
  title: String!
  link: String!
  highlight: Boolean!
}

type LandingHeroBlock implements WagtailBlock {
  id: ID!
  value: LandingHeroBlockValue!
}

type LandingHeroBlockValue {
  image(spec: String!): WagtailImageRendition!
  title: String!
  text: String!
}

type LandingTextBlock implements WagtailBlock {
  id: ID!
  value: LandingTextBlockValue!
}

type LandingTextBlockValue {
  text: String!
  centered: Boolean!
  large: Boolean!
  gray: Boolean!
}

type FrontPartnersBlock implements WagtailBlock {
  id: ID!
  value: [FrontPartnersBlockValue!]!
}

type FrontPartnersBlockValue {
  link: String!
  image(spec: String!): WagtailImageRendition!
}

type EventsListBlock implements WagtailBlock {
  id: ID!
  events: [Event!]!
}

type PhotoRibbonBlock implements WagtailBlock {
  id: ID!
  value(spec: String!): [WagtailImageRendition!]!
}

type HrBlock implements WagtailBlock {
  id: ID!
}

type FrontSocialLinksBlock implements WagtailBlock {
  id: ID!
}

type BlogPostAuthor {
  """Имя"""
  name: String!

  """Описание"""
  description: String!
  image(spec: String!): WagtailImageRendition!
}

type BlogPostPage implements WagtailPage {
  id: ID!

  """заголовок"""
  title: String!
  meta: WagtailPageMeta!

  """Дата поста"""
  date: String!

  """Короткое описание"""
  summary: String!
  body: String!
  authors: [BlogPostAuthor!]!
}

type BlogIndexPage implements WagtailPage {
  id: ID!

  """заголовок"""
  title: String!
  meta: WagtailPageMeta!

  """Подзаголовок"""
  subtitle: String!
  posts: [BlogPostPage!]!
}

type FaqPage implements WagtailPage {
  id: ID!

  """заголовок"""
  title: String!
  meta: WagtailPageMeta!

  """Короткое описание"""
  summary: String!
  prev_page: FaqPage
  next_page: FaqPage
  entries: [FaqEntry!]!
  subpages: [FaqPage!]!
}

type FaqEntry {
  id: ID!

  """Вопрос"""
  question: String!
  answer: String!
}

type WikiAccount implements ExternalServiceAccount {
  service: WikiExternalService!
  name: String!
}

type WikiExternalService implements ExternalService {
  slug: String!
  accounts: [WikiAccount!]!
}

type SlackAccount implements ExternalServiceAccount {
  service: SlackExternalService!
  email: String!
}

type SlackExternalService implements ExternalService {
  slug: String!
  accounts: [SlackAccount!]!
}

type PresentationPage implements WagtailPage {
  title: String!
  id: ID!
  meta: WagtailPageMeta!
  slides: [WagtailBlock!]!
}

type SlideTitleBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type SlideRichTextBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type SlideRawHtmlBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type SlideFragmentsBlock implements WagtailBlock {
  id: ID!
  value: [SlideFragmentsBlockValues!]!
}

union SlideFragmentsBlockValues = SlideFragmentsBlock_RichTextBlock | SlideFragmentsBlock_RawHtmlBlock

type SlideFragmentsBlock_RichTextBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type SlideFragmentsBlock_RawHtmlBlock implements WagtailBlock {
  id: ID!
  value: String!
}

type Query {
  settings: Settings!
  wagtailPage(page_id: ID, path: String, preview_token: String): WagtailPage @deprecated(reason: "Use wagtailPageOrPrivate instead")
  wagtailPageOrPrivate(page_id: ID, path: String, preview_token: String): WagtailPageOrPrivateResult!
  wagtailPages: [WagtailPage!]!
  wagtailImage(input: WagtailImageInput!): WagtailImage
  wagtailImageSearch(input: WagtailImageSearchInput!): WagtailImageSearchResult!
  wagtailBlockStructure(input: WagtailBlockStructureInput!): WagtailBlockStructure!
  wagtailAllBlockStructures: [WagtailBlockStructureWithName!]!
  wagtailRenderBlock(input: WagtailRenderBlockInput!): WagtailRenderBlockResult!
  search(input: SearchInput!): SearchResult!
  wagtailCollectionsForImageUpload: [WagtailCollection!]!
  authGroupsAll: [AuthGroup!]!
  authPermissionsAll: [AuthPermission!]!
  searchUsers(input: SearchUsersInput!): SearchUsersResult!
  zadarmaPbxCalls(before: String, after: String, first: Int, last: Int): ZadarmaPbxCallConnection!
  zadarmaPbxCall(pbx_call_id: ID!): ZadarmaPbxCall!
  importers: [Importer!]!
  importer(module_name: String!): Importer!
  now: NowInfo!
  cm2Customers(search: String, before: String, after: String, first: Int, last: Int): Cm2CustomerConnection!
  cm2Orders(status: String, before: String, after: String, first: Int, last: Int): Cm2OrderConnection!
  cm2Customer(id: ID!): Cm2Customer!
  cm2Order(id: ID!): Cm2Order!
  watchmenWatchmenAll(currentStaff: Boolean, currentRole: Boolean): [WatchmenWatchman!]!
  watchmenGradesAll: [WatchmenGrade!]!
  watchmenShifts(from_date: String!, to_date: String!): [WatchmenShift!]!
  kkmStatus: KkmStatusResult!
  ofdFiscalDrives: [OfdFiscalDrive!]!
  ofdDocuments(before: String, after: String, first: Int, last: Int): OfdDocumentConnection!
  ofdShifts(before: String, after: String, first: Int, last: Int, filter: OfdShiftsFilterInput): OfdShiftConnection!
  cashierPayments(before: String, after: String, first: Int, last: Int): CashierPaymentConnection!
  analyticsBovStats: [AnalyticsBovStat!]!
  events(before: String, after: String, first: Int, last: Int, search: String, filter: EventsFilterInput): EventConnection!
  event(event_id: ID!): Event
  eventsPrototype(id: ID!): EventsPrototype!
  eventsPrototypes: [EventsPrototype!]!
  publicEvents(before: String, after: String, first: Int, last: Int, from_date: String, project_id: ID): EventConnection!
  publicEvent(event_id: ID!): Event
  vkGroups: [VkGroup!]!
  timepadCategories: [TimepadCategory!]!
  eventsWeeklyDigestCurrent: EventsWeeklyDigest!
  eventsPublicGoogleCalendar: EventsGoogleCalendar
  staffMembersAll: [StaffMember!]!
  staffMember(id: ID!): StaffMember!
  ratioTrainings(before: String, after: String, first: Int, last: Int, filter: RatioTrainingsFilterInput): RatioTrainingConnection!
  ratioTrainingBySlug(slug: String!): RatioTraining!
  ratioTrainersAll: [RatioTrainer!]!
  ratioTrainingEmailPrototype(training_id: ID!, type: String!): String!
  ratioTicketTypes(input: RatioTicketTypesInput!): [RatioTicketType!]!
  ratioTicketType(input: RatioTicketTypeInput!): RatioTicketType!
  ratioOrders(before: String, after: String, first: Int, last: Int): RatioOrderConnection!
  ratioTickets(before: String, after: String, first: Int, last: Int, filter: RatioTicketsFilterInput): RatioTicketConnection!
  ratioTicket(id: ID!): RatioTicket!
  ratioTestimonials(before: String, after: String, first: Int, last: Int): RatioTestimonialConnection!
  mastermindDatingCohorts: [MastermindDatingCohort!]!
  mastermindDatingCohortById(id: ID!): MastermindDatingCohort!
  projects: [ProjectPage!]!
  specialOffer: SpecialOffer
  emailMailchimpCategoriesAll: [EmailMailchimpCategory!]!
  emailSubscribeChannelsAll: [EmailSubscribeChannel!]!
  imageTemplatesAll: [ImageTemplate!]!
  imageTemplateBySlug(slug: String!): ImageTemplate!
  publicTelegramChats: [TelegramChat!]!
  allTelegramChats: [TelegramChat!]!
  tildaPage(path: String!): TildaPage
  tildaPages: [TildaPage!]!
  externalServices: [ExternalService!]!
  communityLeads(before: String, after: String, first: Int, last: Int, filter: CommunityLeadsFilterInput): CommunityLeadConnection!
  communityLead(input: CommunityLeadInput!): CommunityLead!
  communityInitiatives(before: String, after: String, first: Int, last: Int, filter: CommunityInitiativesFilterInput): CommunityInitiativeConnection!
  communityInitiative(input: CommunityInitiativeInput!): CommunityInitiative!
  my: My!
}

type Settings {
  default_events_images_collection: WagtailCollection!
  default_events_vk_images_collection: WagtailCollection!
  weekly_digest_images_collection: WagtailCollection!
  telegram_images_collection: WagtailCollection!
  community_org_team_telegram_chat: TelegramChat
}

type WagtailCollection {
  id: ID!
  name: String!
}

union WagtailPageOrPrivateResult = WagtailPageContainer | WagtailPagePrivate

type WagtailPageContainer {
  page: WagtailPage
}

type WagtailPagePrivate {
  message: String!
}

input WagtailImageInput {
  id: ID!
}

type WagtailImageSearchResult {
  results: [WagtailImage!]!
}

input WagtailImageSearchInput {
  query: String!
}

input WagtailBlockStructureInput {
  name: String!
}

type WagtailBlockStructureWithName {
  typename: String!
  structure: WagtailBlockStructure!
}

type WagtailRenderBlockResult {
  validation_error: WagtailStreamFieldValidationError
  block: WagtailBlock
}

type WagtailStreamFieldValidationError {
  block_errors: [WagtailStreamBlockValidationError!]!
  non_block_error: String
}

type WagtailStreamBlockValidationError {
  block_id: Int!
  error: WagtailBlockValidationError
}

input WagtailRenderBlockInput {
  type: String!
  paramsJson: String!
}

type SearchResult {
  results: [SearchItem!]!
  more: Boolean!
}

union SearchItem = PageSearchItem | EventSearchItem

type PageSearchItem {
  page: WagtailPage!
}

type EventSearchItem {
  event: Event!
}

input SearchInput {
  query: String!
  limit: Int
}

type AuthGroup {
  id: ID!

  """имя"""
  name: String!
  permissions: [AuthPermission!]!
  users: [AuthUser!]!
  wagtailCollectionPermissions: [WagtailCollectionPermission!]!
  wagtailPagePermissions: [WagtailPagePermission!]!
}

type AuthPermission {
  id: ID!
  name: String!
  perm: String!
  users: [AuthUser!]!
}

type WagtailCollectionPermission {
  id: ID!
  permission: AuthPermission!
  collection: WagtailCollection!
}

union WagtailPagePermission = WagtailRootPagePermission | WagtailSpecificPagePermission

type WagtailRootPagePermission {
  id: ID!
  permission_type: String!
}

type WagtailSpecificPagePermission {
  id: ID!
  permission_type: String!
  page: WagtailPage!
}

type SearchUsersResult {
  results: [AuthUser!]!
  more: Boolean!
}

input SearchUsersInput {
  query: String!
  limit: Int
}

type ZadarmaPbxCallConnection {
  pageInfo: PageInfo!
  nodes: [ZadarmaPbxCall!]!
  edges: [ZadarmaPbxCallEdge!]!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ZadarmaPbxCall {
  pbx_call_id: String!
  ts: String!
  calls: [ZadarmaCall!]!
  data: ZadarmaData
  id: ID!
}

type ZadarmaCall {
  call_id: String!
  ts: String!
  call_type: String!
  disposition: String!
  clid: String!
  destination: String!
  sip: String!
  is_recorded: Int!
  watchman: String!
  record: String
  id: ID!
}

type ZadarmaData {
  staff_member: StaffMember
}

type ZadarmaPbxCallEdge {
  node: ZadarmaPbxCall!
}

type Importer {
  name: ID!
  last_dt: String
}

type NowInfo {
  total: Int!
  customers: [NowCustomer!]!
}

type NowCustomer {
  card_id: Int!
  first_name: String!
  last_name: String!
}

type Cm2CustomerConnection {
  pageInfo: PageInfo!
  nodes: [Cm2Customer!]!
  edges: [Cm2CustomerEdge!]!
}

type Cm2Customer {
  id: ID!
  card_id: Int!
  first_name: String!
  last_name: String!
  orders(before: String, after: String, first: Int, last: Int): Cm2OrderConnection!
}

type Cm2OrderConnection {
  pageInfo: PageInfo!
  nodes: [Cm2Order!]!
  edges: [Cm2OrderEdge!]!
}

type Cm2Order {
  id: ID!
  start: String!
  end: String
  customer: Cm2Customer
  value: Int!
}

type Cm2OrderEdge {
  node: Cm2Order!
}

type Cm2CustomerEdge {
  node: Cm2Customer!
}

type WatchmenWatchman {
  id: ID!
  priority: Int!
  member: StaffMember!
  grade: WatchmenGrade
}

type WatchmenGrade {
  id: ID!

  """Код"""
  code: String!

  """Повышающий коэффициент"""
  multiplier: Float!
}

type WatchmenShift {
  date: String!
  shift: String!
  is_night: Boolean!
  id: ID!
  watchman: WatchmenWatchman
}

type KkmStatusResult {
  last_shift_closed: String
}

type OfdFiscalDrive {
  id: ID!
  fiscal_drive_number: String!
}

type OfdDocumentConnection {
  pageInfo: PageInfo!
  nodes: [OfdDocument!]!
  edges: [OfdDocumentEdge!]!
}

type OfdDocument {
  id: ID!
  document_id: Int!
  cash: Float!
  electronic: Float!
  check_type: String!
  items: [OfdDocumentItem!]!
  created: String!
}

type OfdDocumentItem {
  id: ID!
  name: String!
  quantity: Float!
  price: Float!
  sum: Float!
  product_type: Int!
  payment_type: Int!
}

type OfdDocumentEdge {
  node: OfdDocument!
}

type OfdShiftConnection {
  pageInfo: PageInfo!
  nodes: [OfdShift!]!
  edges: [OfdShiftEdge!]!
}

type OfdShift {
  id: ID!
  shift_id: Int!
  cash: Float!
  electronic: Float!
  close_dt: String
  open_dt: String!
}

type OfdShiftEdge {
  node: OfdShift!
}

input OfdShiftsFilterInput {
  open_only: Boolean
}

type CashierPaymentConnection {
  pageInfo: PageInfo!
  nodes: [CashierPayment!]!
  edges: [CashierPaymentEdge!]!
}

type CashierPayment {
  id: ID!

  """Сумма"""
  amount: Int!

  """Дата создания"""
  created_dt: String!

  """Дата получения"""
  redeem_dt: String

  """Комментарий"""
  comment: String!
  is_redeemed: Boolean!
  whom: AuthUser!
}

type CashierPaymentEdge {
  node: CashierPayment!
}

type AnalyticsBovStat {
  date: String!
  count: Int!
  total_income: Int!
}

type EventConnection {
  pageInfo: PageInfo!
  nodes: [Event!]!
  edges: [EventEdge!]!
}

type EventEdge {
  node: Event!
}

input EventsFilterInput {
  event_type: String
}

type EventsWeeklyDigest {
  id: ID!

  """Дата начала недели"""
  start: String!
  image(spec: String!): WagtailImageRendition
  mailchimp: EventsWeeklyDigestMailchimp!
  telegram: EventsWeeklyDigestTelegram!
  vk: EventsWeeklyDigestVk!
}

type EventsWeeklyDigestMailchimp {
  link: String
  is_sent: Boolean!
}

type EventsWeeklyDigestTelegram {
  link: String
}

type EventsWeeklyDigestVk {
  link: String
}

type EventsGoogleCalendar {
  id: ID!
  url: String!
}

type RatioTrainingConnection {
  pageInfo: PageInfo!
  nodes: [RatioTraining!]!
  edges: [RatioTrainingEdge!]!
}

type RatioTraining {
  id: ID!

  """Название"""
  name: String!
  slug: String!
  training_type: String!

  """Дата начала"""
  date: String

  """Телеграм-чат"""
  telegram_link: String!
  salaries_paid: Boolean!

  """Сумма скидки одноразового промокода по E-mail'у"""
  discount_by_email: Int!

  """Процент скдики одноразового промокода по E-mail'у"""
  discount_percent_by_email: Int!
  promocode_email: String!
  new_ticket_email: String!
  notion_created_email: String!
  tickets: [RatioTicket!]!
  schedule: [RatioTrainingDay!]!
  ticket_types: [RatioTicketType!]!
  tickets_count: Int!
  total_income: Int!
  promocodes_count: Int!
  promocodes(before: String, after: String, first: Int, last: Int): RatioPromocodeConnection!
}

type RatioTicket {
  id: ID!
  email: String!

  """Имя"""
  first_name: String!

  """Фамилия"""
  last_name: String!

  """Дата регистрации"""
  registration_date: String

  """Дата создания"""
  created: String!

  """Статус"""
  status: String!

  """Тип билета"""
  ticket_class: String!

  """Размер оплаты"""
  payment_amount: Int!
  comment: String!
  notion_link: String!
  payments: [RatioPayment!]!
  training: RatioTraining!
  ticket_type: RatioTicketType
  need_notion_link: Boolean!
}

type RatioPayment {
  id: ID!

  """Размер оплаты"""
  amount: Int!

  """Вид оплаты"""
  payment_type: String!

  """Статус"""
  status: String!

  """Статус фискального чека"""
  fiscalization_status: String!
  comment: String!

  """Кастомный заголовок для чека"""
  custom_kkm_title: String!
  ticket: RatioTicket!
}

type RatioTicketType {
  """Стоимость"""
  price: Int!

  """Название"""
  name: String!

  """Сумма скидки одноразового промокода по E-mail'у"""
  discount_by_email: Int!

  """Процент скдики одноразового промокода по E-mail'у"""
  discount_percent_by_email: Int!
  id: ID!
  training: RatioTraining!
  promocodes_count: Int!
  promocodes(before: String, after: String, first: Int, last: Int): RatioPromocodeConnection!
}

type RatioPromocodeConnection {
  pageInfo: PageInfo!
  nodes: [RatioPromocode!]!
  edges: [RatioPromocodeEdge!]!
}

type RatioPromocode {
  id: ID!

  """Промокод"""
  code: String!

  """Сумма скидки"""
  discount: Int!

  """Процент скидки"""
  discount_percent: Int!

  """Максимальное количество использований"""
  uses_max: Int

  """Количество использований"""
  uses_count: Int!

  """Создан для E-mail'а"""
  for_email: String!
}

type RatioPromocodeEdge {
  node: RatioPromocode!
}

type RatioTrainingDay {
  id: ID!

  """Дата"""
  date: String!
  activities: [RatioActivity!]!
}

type RatioActivity {
  id: ID!

  """Время"""
  time: String!

  """Тип"""
  activity_type: String!

  """Название"""
  name: String!

  """Локация"""
  location: String!
  trainer: RatioTrainer
}

type RatioTrainer {
  id: ID!

  """Короткое имя"""
  short_name: String!

  """Длинное имя"""
  long_name: String!
}

type RatioTrainingEdge {
  node: RatioTraining!
}

input RatioTrainingsFilterInput {
  eternal: Boolean
}

input RatioTicketTypesInput {
  id: ID
  training_type: String
}

input RatioTicketTypeInput {
  id: ID!
}

type RatioOrderConnection {
  pageInfo: PageInfo!
  nodes: [RatioOrder!]!
  edges: [RatioOrderEdge!]!
}

type RatioOrder {
  fulfilled: Boolean!
  id: ID!
  confirmation_token: String!
  created: String!
  email: String!
  first_name: String!
  last_name: String!
  city: String!
  ticket_type: RatioTicketType!
  payment: YandexKassaPayment!
  price: Int!
  promocode: RatioPromocode
}

type YandexKassaPayment {
  id: ID!
  kassa_id: String!
  is_paid: Boolean!
  status: YandexKassaPaymentStatus!
  waiting_for_capture: Boolean!
}

enum YandexKassaPaymentStatus {
  pending
  waiting_for_capture
  succeeded
  canceled
}

type RatioOrderEdge {
  node: RatioOrder!
}

type RatioTicketConnection {
  pageInfo: PageInfo!
  nodes: [RatioTicket!]!
  edges: [RatioTicketEdge!]!
}

type RatioTicketEdge {
  node: RatioTicket!
}

input RatioTicketsFilterInput {
  with_missing_payments: Boolean
  with_unfiscalized_checks: Boolean
  without_notion_link: Boolean
}

type RatioTestimonialConnection {
  pageInfo: PageInfo!
  nodes: [RatioTestimonial!]!
  edges: [RatioTestimonialEdge!]!
}

type RatioTestimonial {
  id: ID!
  author_name: String!
  author_description: String!
  author_image(spec: String!): WagtailImageRendition
  text: String!
  product: RatioTestimonialProduct
}

type RatioTestimonialProduct {
  id: ID!
  title: String!
  color: String!
  link: String!
}

type RatioTestimonialEdge {
  node: RatioTestimonial!
}

type MastermindDatingCohort {
  id: ID!
  leader_telegram_uid: String!
  event: Event
  participants: [MastermindDatingParticipant!]!
  groups: [MastermindDatingGroup!]!
}

type MastermindDatingParticipant {
  id: ID!
  name: String!
  desc: String!
  voted_for: Boolean!
  present: Boolean!
  invite_email_sent: Boolean!
  photo: String
  user: AuthUser!
  cohort: MastermindDatingCohort!
}

type MastermindDatingGroup {
  id: ID!
  telegram_invite_link: String!
  participants: [MastermindDatingParticipant!]!
}

type SpecialOffer {
  id: ID!
  text: String!
  link: String!
  button_text: String!
  until: String!
  hide_duration: Int!
}

type EmailMailchimpCategory {
  id: ID!
  title: String!
  category_id: String!
  interests: [EmailMailchimpInterest!]!
}

type EmailMailchimpInterest {
  id: ID!
  interest_id: String!
  name: String!
  subscriber_count: Int!
  category: EmailMailchimpCategory!
}

type EmailSubscribeChannel {
  id: ID!
  slug: String!
  interests: [EmailMailchimpInterest!]!
  log(before: String, after: String, first: Int, last: Int): EmailSubscribeChannelLogConnection!
}

type EmailSubscribeChannelLogConnection {
  pageInfo: PageInfo!
  nodes: [EmailSubscribeChannelLog!]!
  edges: [EmailSubscribeChannelLogEdge!]!
}

type EmailSubscribeChannelLog {
  id: ID!
  dt: String!
  email: String!
}

type EmailSubscribeChannelLogEdge {
  node: EmailSubscribeChannelLog!
}

type ImageTemplate {
  name: ID!
  schema: ImageTemplateSchema!
  sizes: ImageTemplateSizes!
}

type ImageTemplateSchema {
  fields: [ImageTemplateSchemaField!]!
}

type ImageTemplateSchemaField {
  name: String!
  value_type: String! @deprecated(reason: "Use `type` enum field instead")
  type: ImageTemplateValueType!
  default: String
}

enum ImageTemplateValueType {
  STRING
  INT
  FLOAT
  DATE
}

type ImageTemplateSizes {
  width: Int!
  height: Int!
}

type TildaPage {
  id: ID!
  page_id: Int!
  path: String!
  body: String!
  title: String!
  description: String!
  show_header_and_footer: Boolean!
  og_image(spec: String!): WagtailImageRendition
  assets: [TildaAsset!]!
  css: [TildaAsset!]!
  js: [TildaAsset!]!
  imported_dt: String!
}

type TildaAsset {
  url: String!
  kind: String!
}

type CommunityLeadConnection {
  pageInfo: PageInfo!
  nodes: [CommunityLead!]!
  edges: [CommunityLeadEdge!]!
}

type CommunityLead implements Commentable {
  id: ID!
  name: String!
  description: String!
  created: String!
  updated: String!
  events: [Event!]!
  initiatives: [CommunityInitiative!]!
  created_by: AuthUser
  curated_by: AuthUser
  status: CommunityLeadStatus!
  comments_count: Int!
  comments: [Comment!]!
}

interface Commentable {
  comments_count: Int!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  created: String!
  text: String!
  author: AuthUser!
}

type CommunityInitiative implements Commentable {
  id: ID!
  title: String!
  description: String!
  created: String!
  updated: String!
  leads: [CommunityLead!]!
  created_by: AuthUser
  curated_by: AuthUser
  status: CommunityInitiativeStatus!
  comments_count: Int!
  comments: [Comment!]!
}

enum CommunityInitiativeStatus {
  ACTIVE
  INACTIVE
}

enum CommunityLeadStatus {
  ACTIVE
  INACTIVE
}

type CommunityLeadEdge {
  node: CommunityLead!
}

input CommunityLeadsFilterInput {
  status: CommunityLeadStatus
  curated_by_me: Boolean
  curated_by_empty: Boolean
  search: String
}

input CommunityLeadInput {
  id: ID!
}

type CommunityInitiativeConnection {
  pageInfo: PageInfo!
  nodes: [CommunityInitiative!]!
  edges: [CommunityInitiativeEdge!]!
}

type CommunityInitiativeEdge {
  node: CommunityInitiative!
}

input CommunityInitiativesFilterInput {
  status: CommunityInitiativeStatus
}

input CommunityInitiativeInput {
  id: ID!
}

type My {
  user: AuthCurrentUser!
  membership: MyCmCustomer
  tickets(before: String, after: String, first: Int, last: Int): MyEventsTicketConnection!
  email_subscription: MyEmailSubscription!
}

"""
Describes the current user.

If user is not signed in, `is_authenticated` field will be false and all other fields will be empty.
"""
type AuthCurrentUser {
  id: ID!
  is_authenticated: Boolean!
  email: String
  first_name: String
  last_name: String
  is_staff: Boolean
  is_superuser: Boolean!
  permissions: [String!]!
}

type MyCmCustomer {
  """Номер карты"""
  card_id: Int!
  subscription_until: String
  last_visit: String
  total_spent: Int!

  """Приватность"""
  privacy_mode: String!
  orders_count: Int!
  orders: [MyCmOrder!]!
}

type MyCmOrder {
  order_id: ID!
  start_dt: String!
  end_dt: String
}

type MyEventsTicketConnection {
  pageInfo: PageInfo!
  nodes: [MyEventsTicket!]!
  edges: [MyEventsTicketEdge!]!
}

type MyEventsTicketEdge {
  node: MyEventsTicket!
}

type MyEmailSubscription {
  status: String!
  interests: [MyEmailSubscriptionInterest!]
}

type MyEmailSubscriptionInterest {
  id: ID!
  name: String!
  subscribed: Boolean
}

type Mutation {
  updateSettings(input: UpdateSettingsInput!): Settings!
  wagtailUploadImageFromUrl(input: WagtailUploadImageFromUrlInput!): WagtailUploadImageFromUrlResult!
  authAddUserToGroup(group_id: ID!, user_id: ID!): Boolean!
  authRemoveUserFromGroup(group_id: ID!, user_id: ID!): Boolean!
  createAuthGroup(name: String!): AuthGroup!
  deleteAuthGroup(id: ID!): BasicResult!
  addPermissionToAuthGroup(group_id: ID!, perm: String!): AuthGroup!
  removePermissionFromAuthGroup(group_id: ID!, perm: String!): AuthGroup!
  authLogin(input: AuthLoginInput!): AuthLoginResult!
  setMyPassword(input: SetMyPasswordInput!): SetMyPasswordResult!
  authLogout: AuthLogoutResult!
  authSendMagicLink(input: AuthSendMagicLinkInput!): AuthSendMagicLinkResult!
  authSetMyNames(input: AuthSetMyNamesInput!): AuthSetMyNamesResult!
  zadarmaSetMemberForPbxCall(member_id: ID!, pbx_call_id: ID!): Boolean!
  fbMarketingAudienceUploadRatioTickets: BasicResult!
  myPrivacyModeSet(mode: String!): Boolean
  cm2CreateOrder(input: Cm2CreateOrderInput!): Cm2Order!
  cm2CreateCustomer(input: Cm2CreateCustomerInput!): Cm2Customer!
  cm2CloseOrder(id: ID!): Boolean!
  watchmenCreateWatchman(input: WatchmenCreateWatchmanInput!): Boolean!
  watchmenUpdateShift(input: WatchmenUpdateShiftInput!): WatchmenUpdateShiftResult!
  watchmenSetWatchmanPriority(input: WatchmenSetWatchmanPriorityInput!): Boolean!
  watchmenSetWatchmanGrade(input: WatchmenSetWatchmanGradeInput!): Boolean!
  kkmRegisterCheck(input: KkmRegisterCheckInput!): KkmRegisterCheckResult!
  closeKkmShift: BasicResult!
  cashierCreatePayment(input: CashierCreatePaymentInput!): Boolean
  cashierRedeemPayment(id: ID!): Boolean
  updateYandexKassaPayment(input: UpdateYandexKassaPaymentInput!): UpdateYandexKassaPaymentResult!
  cancelYandexKassaPayment(input: CancelYandexKassaPaymentInput!): CancelYandexKassaPaymentResult!
  myEventsTicketUnregister(event_id: ID!): MyEventsTicket!
  myEventsTicketRegister(event_id: ID!): MyEventsTicket!
  myEventsTicketRegisterAnon(input: MyEventsTicketRegisterAnonInput!): MyEventsTicket!
  eventCreate(input: EventCreateInput!): EventCreateResult!
  eventUpdate(input: EventUpdateInput!): EventUpdateResult!
  eventDelete(input: EventDeleteInput!): BasicResult!
  cancelEvent(input: CancelEventInput!): CancelEventResult!
  eventGenerateZoomLink(input: EventGenerateZoomLinkInput!): EventUpdateResult!
  eventAddTag(input: EventAddTagInput!): EventUpdateResult!
  eventDeleteTag(input: EventDeleteTagInput!): EventUpdateResult!
  eventMove(input: EventMoveInput!): EventUpdateResult!
  eventGenerateOpenViduToken(input: EventGenerateOpenViduTokenInput!): EventGenerateOpenViduTokenResult!
  addYoutubeVideo(input: AddYoutubeVideoInput!): AddYoutubeVideoResult!
  deleteYoutubeVideo(id: ID!): DeleteYoutubeVideoResult!
  eventPrototypeCreate(input: EventPrototypeCreateInput!): EventPrototypeUpdateResult!
  eventPrototypeUpdate(input: EventPrototypeUpdateInput!): EventPrototypeUpdateResult!
  eventPrototypeCancelDate(input: EventPrototypeCancelDateInput!): BasicResult!
  eventPrototypeNewEvent(input: EventPrototypeNewEventInput!): BasicResult!
  eventPrototypeAddTag(input: EventPrototypeAddTagInput!): EventPrototypeUpdateResult!
  eventPrototypeDeleteTag(input: EventPrototypeDeleteTagInput!): EventPrototypeUpdateResult!
  eventPrototypeSetImage(input: EventPrototypeSetImageInput!): EventPrototypeUpdateResult!
  eventsWeeklyDigestPostVk: EventsWeeklyDigestUpdateResult!
  eventsWeeklyDigestPostTelegram: EventsWeeklyDigestUpdateResult!
  eventsWeeklyDigestPostMailchimp(input: EventsWeeklyDigestPostMailchimpInput!): EventsWeeklyDigestUpdateResult!
  cancelWeeklyDigestMailchimp: CancelWeeklyDigestMailchimpResult!
  sendWeeklyDigestMailchimp: SendWeeklyDigestMailchimpResult!
  vkWikiScheduleUpdate: BasicResult
  eventTimepadAnnouncementUpdate(input: EventTimepadAnnouncementUpdateInput!): EventUpdateResult
  eventVkAnnouncementUpdate(input: EventVkAnnouncementUpdateInput!): EventUpdateResult
  eventVkAnnouncementSetImage(input: EventVkAnnouncementSetImageInput!): EventUpdateResult
  eventAnnounce(input: EventAnnounceInput!): EventUpdateResult
  eventSetAnnounceUrl(input: EventSetAnnounceUrlInput!): EventUpdateResult
  eventsFeedbackCreate(input: EventsFeedbackCreateInput!): EventsFeedbackCreateResult!
  eventsFeedbackDelete(input: EventsFeedbackDeleteInput!): BasicResult!
  staffGrantGooglePermissionsToMember(id: ID!): Boolean
  staffFireMember(id: ID!): Boolean
  staffUnfireMember(id: ID!): Boolean
  ratioTrainingSyncParticipantsToMailchimp(training_id: ID!): Boolean!
  ratioTrainingSendEmail(input: RatioTrainingSendEmailInput!): RatioTrainingSendEmailResult!
  ratioCreateOrder(input: RatioCreateOrderInput!): RatioCreateOrderResult!
  ratioConfirmOrder(input: RatioConfirmOrderInput!): RatioConfirmOrderResult!
  ratioPaymentAdd(input: RatioPaymentAddInput!): RatioPaymentAddResult!
  ratioPaymentDelete(payment_id: ID!): BasicResult!
  ratioPaymentFiscalize(payment_id: ID!): Boolean!
  ratioPaymentFiscalizedManually(payment_id: ID!): RatioPaymentFiscalizedManuallyResult!
  ratioPaymentSetStatus(input: RatioPaymentSetStatusInput!): RatioPaymentSetStatusResult!
  ratioTrainingCopyScheduleFrom(input: RatioTrainingCopyScheduleFromInput!): Boolean!
  ratioTrainingAddDay(input: RatioTrainingAddDayInput!): Boolean!
  createRatioTicketType(input: CreateRatioTicketTypeInput!): RatioTicketType!
  updateRatioTicketType(input: UpdateRatioTicketTypeInput!): RatioTicketType!
  deleteRatioTicketType(input: DeleteRatioTicketTypeInput!): BasicResult!
  ratioAddTicket(input: RatioAddTicketInput!): RatioTicket!
  updateRatioTicket(input: UpdateRatioTicketInput!): RatioTicket!
  setRatioTicketNotionLink(input: SetRatioTicketNotionLinkInput!): RatioTicket!
  replaceRatioTicketNotionLink(input: ReplaceRatioTicketNotionLinkInput!): RatioTicket!
  createRatioTraining(input: CreateRatioTrainingInput!): CreateRatioTrainingResult!
  updateRatioTraining(input: UpdateRatioTrainingInput!): UpdateRatioTrainingResult!
  ratioDeleteTraining(input: RatioDeleteTrainingInput!): BasicResult!
  createRatioPromocode(input: CreateRatioPromocodeInput!): CreateRatioPromocodeResult!
  checkRatioPromocode(input: CheckRatioPromocodeInput!): CheckRatioPromocodeResult
  sendUniqueRatioPromocode(input: SendUniqueRatioPromocodeInput!): SendUniqueRatioPromocodeResult!
  mastermindDatingCreateCohort: MastermindDatingCohortMutationResult!
  mastermindDatingPopulateCohortFromEvent(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingSendInviteEmails(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingClearAllGroups(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingRunSolver(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingBroadcastSolution(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingDeleteCohort(cohort_id: ID!): BasicResult!
  mastermindDatingCreateGroup(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingSetEventForCohort(cohort_id: ID!, event_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingUnsetEventForCohort(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingCreateParticipant(cohort_id: ID!, email: String!): MastermindDatingParticipantMutationResult!
  mastermindDatingActivateVoting(participant_id: ID!): MastermindDatingParticipantMutationResult!
  mastermindDatingSetPresenceStatus(participant_id: ID!, present: Boolean!): MastermindDatingParticipantMutationResult!
  wagtailEditPageBodyBlocks(input: WagtailEditPageBodyBlocksInput!): WagtailEditPageBodyBlocksResult!
  emailSubscribeChannelDelete(slug: String!): Boolean
  emailSubscribeChannelCreate(params: EmailSubscribeChannelCreateInput!): Boolean
  emailSubscribeChannelAddEmail(slug: String!, email: String!): Boolean
  myEmailResubscribe: Boolean
  myEmailUnsubscribe: Boolean
  myEmailSubscribeToInterest(interest_id: ID!): Boolean!
  myEmailUnsubscribeFromInterest(interest_id: ID!): Boolean!
  addTelegramChat(input: AddTelegramChatInput!): AddTelegramChatResult!
  addTelegramChatByInviteLink(input: AddTelegramChatByInviteLinkInput!): AddTelegramChatByInviteLinkResult!
  deleteTelegramChat(id: ID!): DeleteTelegramChatResult!
  updateTelegramChat(input: UpdateTelegramChatInput!): UpdateTelegramChatResult!
  refreshTelegramChatData(id: ID!): RefreshTelegramChatDataResult!
  postToTelegramChat(input: PostToTelegramChatInput!): PostToTelegramChatResult!
  tildaImportAll: BasicResult
  importTildaPage(input: ImportTildaPageInput!): ImportTildaPageResult!
  removeTildaPage(input: RemoveTildaPageInput!): BasicResult
  openviduGenerateRoomToken: OpenviduGenerateRoomTokenResult!
  createCommunityLead(input: CreateCommunityLeadInput!): CreateCommunityLeadResult!
  updateCommunityLead(input: UpdateCommunityLeadInput!): UpdateCommunityLeadResult!
  deleteCommunityLead(id: ID!): DeleteCommunityLeadResult!
  becomeCommunityLeadCurator(input: BecomeCommunityLeadCuratorInput!): BecomeCommunityLeadCuratorResult!
  clearCommunityLeadCurator(input: ClearCommunityLeadCuratorInput!): ClearCommunityLeadCuratorResult!
  addEventToCommunityLead(input: AddEventToCommunityLeadInput!): AddEventToCommunityLeadResult!
  removeEventFromCommunityLead(input: RemoveEventFromCommunityLeadInput!): RemoveEventFromCommunityLeadResult!
  commentOnCommunityLead(input: CommentOnCommunityLeadInput!): CommentOnCommunityLeadResult!
  createCommunityInitiative(input: CreateCommunityInitiativeInput!): CreateCommunityInitiativeResult!
  updateCommunityInitiative(input: UpdateCommunityInitiativeInput!): UpdateCommunityInitiativeResult!
  deleteCommunityInitiative(id: ID!): DeleteCommunityInitiativeResult!
  addLeadToCommunityInitiative(input: AddLeadToCommunityInitiativeInput!): AddLeadToCommunityInitiativeResult!
  removeLeadFromCommunityInitiative(input: RemoveLeadFromCommunityInitiativeInput!): RemoveLeadFromCommunityInitiativeResult!
  commentOnCommunityInitiative(input: CommentOnCommunityInitiativeInput!): CommentOnCommunityInitiativeResult!
  editComment(input: EditCommentInput!): EditCommentResult!
  deleteComment(input: DeleteCommentInput!): DeleteCommentResult!
}

input UpdateSettingsInput {
  default_events_images_collection: ID
  default_events_vk_images_collection: ID
  weekly_digest_images_collection: ID
  community_org_team_telegram_chat: ID
}

type WagtailUploadImageFromUrlResult {
  image: WagtailImage!
}

input WagtailUploadImageFromUrlInput {
  url: String!
  title: String!
  basename: String!
  collection_id: String!
}

type BasicResult {
  ok: Boolean
}

type AuthLoginResult {
  error: String
  user: AuthCurrentUser
  registered: Boolean
}

input AuthLoginInput {
  credentials: AuthLoginCredentialsInput!
  result: String!
}

input AuthLoginCredentialsInput {
  email: String
  password: String
  token: String
}

union SetMyPasswordResult = SetMyPasswordOkResult | GenericError | ValidationError

type SetMyPasswordOkResult {
  ok: Boolean!
}

type GenericError {
  message: String!
}

type ValidationError {
  errors: [ValidationErrorItem!]!
}

type ValidationErrorItem {
  name: String!
  messages: [String!]!
}

input SetMyPasswordInput {
  old_password: String
  new_password: String!
}

type AuthLogoutResult {
  ok: Boolean
}

type AuthSendMagicLinkResult {
  ok: Boolean
  error: String
}

input AuthSendMagicLinkInput {
  email: String!
  next: String
}

union AuthSetMyNamesResult = AuthCurrentUser | GenericError | ValidationError

input AuthSetMyNamesInput {
  first_name: String!
  last_name: String!
}

input Cm2CreateOrderInput {
  customer: ID
}

input Cm2CreateCustomerInput {
  card_id: Int!
  first_name: String!
  last_name: String!
}

input WatchmenCreateWatchmanInput {
  email: String!
  short_name: String!
  full_name: String!
  password: String!
  vk: String
  gender: String!
  skip_wiki: Boolean
  skip_cm_customer: Boolean
  skip_cm_user: Boolean
}

union WatchmenUpdateShiftResult = WatchmenShift | ValidationError | GenericError

input WatchmenUpdateShiftInput {
  date: String!
  shift: String!
  watchman_id: ID
  is_night: Boolean
}

input WatchmenSetWatchmanPriorityInput {
  watchman_id: ID!
  priority: Int!
}

input WatchmenSetWatchmanGradeInput {
  watchman_id: ID!
  grade_id: ID!
}

union KkmRegisterCheckResult = KkmRegisterCheckOkResult | GenericError

type KkmRegisterCheckOkResult {
  url: String!
}

input KkmRegisterCheckInput {
  email: String!
  title: String!
  sum: Int!
  sign_method_calculation: KkmSignMethodCalculation!
}

enum KkmSignMethodCalculation {
  """
  ПРЕДОПЛАТА 100% (Полная предварительная оплата до момента передачи предмета расчета)
  """
  PRE_PAYMENT_100

  """
  ПРЕДОПЛАТА (Частичная предварительная оплата до момента передачи предмета расчета)
  """
  PRE_PAYMENT

  """АВАНС"""
  ADVANCE

  """
  ПОЛНЫЙ РАСЧЕТ (Полная оплата, в том числе с учетом аванса в момент передачи предмета расчета)
  """
  FULL_PAYMENT

  """
  ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ (Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит)
  """
  PARTIAL_PAYMENT_AND_CREDIT

  """
  ПЕРЕДАЧА В КРЕДИТ (Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит)
  """
  CREDIT_TRANSFER

  """
  ОПЛАТА КРЕДИТА (Оплата предмета расчета после его передачи с оплатой в кредит)
  """
  CREDIT_PAYMENT
}

input CashierCreatePaymentInput {
  amount: Int!
  whom: ID!
  comment: String!
}

union UpdateYandexKassaPaymentResult = YandexKassaPayment | GenericError

input UpdateYandexKassaPaymentInput {
  id: ID!
}

union CancelYandexKassaPaymentResult = YandexKassaPayment | GenericError

input CancelYandexKassaPaymentInput {
  id: ID!
}

input MyEventsTicketRegisterAnonInput {
  event_id: ID!
  email: String!
  subscribed_to_newsletter: Boolean
}

type EventCreateResult {
  ok: Boolean
  event: Event!
}

input EventCreateInput {
  start: String!
  end: String!
  title: String!
  description: String
  location: String
}

type EventUpdateResult {
  ok: Boolean
  event: Event!
}

input EventUpdateInput {
  event_id: ID!
  start: String
  end: String
  published: Boolean
  visitors: String
  title: String
  description: String
  summary: String
  event_type: String
  registration_type: String
  pricing_type: String
  realm: String
  timing_description_override: String
  location: String
  zoom_link: String
  prototype_id: ID
  project_slug: String
  image_id: ID
}

input EventDeleteInput {
  event_id: ID!
}

union CancelEventResult = BasicResult | GenericError | ValidationError

input CancelEventInput {
  event_id: ID!
  notification_message: String!
}

input EventGenerateZoomLinkInput {
  event_id: ID!
}

input EventAddTagInput {
  event_id: ID!
  tag: String!
}

input EventDeleteTagInput {
  event_id: ID!
  tag: String!
}

input EventMoveInput {
  event_id: ID!
  start: String!
}

type EventGenerateOpenViduTokenResult {
  token: String!
}

input EventGenerateOpenViduTokenInput {
  event_id: ID!
}

union AddYoutubeVideoResult = Event | GenericError | ValidationError

input AddYoutubeVideoInput {
  event_id: ID!
  embed_id: String!
}

union DeleteYoutubeVideoResult = BasicResult

type EventPrototypeUpdateResult {
  ok: Boolean!
  prototype: EventsPrototype!
}

input EventPrototypeCreateInput {
  title: String!
  summary: String
  description: String
  timing_description_override: String
  location: String
  weekday: Int!
  hour: Int!
  minute: Int!
  length: Int!
  project_slug: String
  vk_group_name: String
  timepad_category_code: String
}

input EventPrototypeUpdateInput {
  id: ID!
  active: Boolean
  title: String
  summary: String
  description: String
  timing_description_override: String
  location: String
  weekday: Int
  hour: Int
  minute: Int
  length: Int
  project_slug: String
  vk_group_name: String
  timepad_category_code: String
}

input EventPrototypeCancelDateInput {
  id: ID!
  date: String!
}

input EventPrototypeNewEventInput {
  id: ID!
  ts: Int!
}

input EventPrototypeAddTagInput {
  id: ID!
  tag: String!
}

input EventPrototypeDeleteTagInput {
  id: ID!
  tag: String!
}

input EventPrototypeSetImageInput {
  id: ID!
  image_id: ID!
}

type EventsWeeklyDigestUpdateResult {
  ok: Boolean
  digest: EventsWeeklyDigest!
}

input EventsWeeklyDigestPostMailchimpInput {
  text_before: String
  text_after: String
}

union CancelWeeklyDigestMailchimpResult = GenericError | EventsWeeklyDigest

union SendWeeklyDigestMailchimpResult = GenericError | EventsWeeklyDigest

input EventTimepadAnnouncementUpdateInput {
  event_id: ID!
  prepaid_tickets: Boolean
  category_code: String
}

input EventVkAnnouncementUpdateInput {
  event_id: ID!
  group: String
}

input EventVkAnnouncementSetImageInput {
  event_id: ID!
  image_id: ID!
}

input EventAnnounceInput {
  event_id: ID!
  target: EventAnnounceTarget!
}

enum EventAnnounceTarget {
  VK
  FB
  TIMEPAD
}

input EventSetAnnounceUrlInput {
  event_id: ID!
  target: EventAnnounceTarget!
  url: String!
}

type EventsFeedbackCreateResult {
  ok: Boolean
  feedback: EventsFeedback!
}

input EventsFeedbackCreateInput {
  event_id: ID!
  overall_score: Int
  recommend_score: Int
  content_score: Int
  conductor_score: Int
  source_friend: Boolean!
  source_vk: Boolean!
  source_fb: Boolean!
  source_timepad: Boolean!
  source_email: Boolean!
  source_website: Boolean!
  custom_source: String
  comment: String
}

input EventsFeedbackDeleteInput {
  id: ID!
}

type RatioTrainingSendEmailResult {
  draft_link: String!
}

input RatioTrainingSendEmailInput {
  training_id: ID!
  title: String!
  content: String!
}

union RatioCreateOrderResult = RatioOrder | ValidationError | GenericError

input RatioCreateOrderInput {
  ticket_type_id: ID!
  email: String!
  first_name: String
  last_name: String
  city: String
  promocode: String
  payer: RatioCreateOrderPayerInput
}

input RatioCreateOrderPayerInput {
  email: String!
  first_name: String!
  last_name: String!
}

type RatioConfirmOrderResult {
  outcome: RatioConfirmOrderOutcome!
}

enum RatioConfirmOrderOutcome {
  NOT_FOUND
  NOT_PAID
  OK
  ALREADY_FULFILLED
  TICKET_ALREADY_EXISTS
}

input RatioConfirmOrderInput {
  order_id: ID!
}

type RatioPaymentAddResult {
  payment: RatioPayment!
}

input RatioPaymentAddInput {
  ticket_id: ID!
  amount: Int!
  status: String
  fiscalization_status: String!
  payment_type: String!
  comment: String
}

type RatioPaymentFiscalizedManuallyResult {
  payment: RatioPayment!
}

type RatioPaymentSetStatusResult {
  payment: RatioPayment!
}

input RatioPaymentSetStatusInput {
  payment_id: ID!
  status: String!
}

input RatioTrainingCopyScheduleFromInput {
  from_training_slug: String!
  to_training_slug: String!
}

input RatioTrainingAddDayInput {
  training_slug: String!
  date: String!
}

input CreateRatioTicketTypeInput {
  training_id: ID!
  price: Int!
  name: String!
  discount_by_email: Int
  discount_percent_by_email: Int
}

input UpdateRatioTicketTypeInput {
  id: ID!
  price: Int
  name: String
  discount_by_email: Int
  discount_percent_by_email: Int
}

input DeleteRatioTicketTypeInput {
  id: ID!
}

input RatioAddTicketInput {
  training: ID!
  ticket_type: ID
  email: String!
  first_name: String
  last_name: String
  payment_amount: Int!
  ticket_class: String
  comment: String
}

input UpdateRatioTicketInput {
  id: ID!
  first_name: String
  last_name: String
  notion_link: String
  ticket_type: ID
}

input SetRatioTicketNotionLinkInput {
  id: ID!
  notion_link: String!
}

input ReplaceRatioTicketNotionLinkInput {
  id: ID!
  notion_link: String!
  send_email: Boolean!
}

union CreateRatioTrainingResult = RatioTraining | ValidationError | GenericError

input CreateRatioTrainingInput {
  name: String!
  slug: String!
  training_type: String
  date: String
  telegram_link: String
  discount_by_email: Int
  discount_percent_by_email: Int
}

union UpdateRatioTrainingResult = RatioTraining | ValidationError | GenericError

input UpdateRatioTrainingInput {
  id: ID!
  name: String
  training_type: String
  date: String
  telegram_link: String
  discount_by_email: Int
  discount_percent_by_email: Int
  promocode_email: String
  new_ticket_email: String
  notion_created_email: String
}

input RatioDeleteTrainingInput {
  slug: String!
}

union CreateRatioPromocodeResult = RatioPromocode | ValidationError | GenericError

input CreateRatioPromocodeInput {
  ticket_type_id: ID
  training_id: ID
  code: String!
  discount: Int!
  uses_max: Int
}

type CheckRatioPromocodeResult {
  discounted_price: Int!
}

input CheckRatioPromocodeInput {
  ticket_type_id: ID!
  code: String!
}

union SendUniqueRatioPromocodeResult = BasicResult | GenericError

input SendUniqueRatioPromocodeInput {
  ticket_type_id: ID
  training_id: ID
  email: String!
}

type MastermindDatingCohortMutationResult {
  cohort: MastermindDatingCohort!
}

type MastermindDatingParticipantMutationResult {
  participant: MastermindDatingParticipant!
}

type WagtailEditPageBodyBlocksResult {
  page: WagtailPage
  validation_error: WagtailStreamFieldValidationError
}

input WagtailEditPageBodyBlocksInput {
  page_id: ID!
  publish: Boolean!
  blocksJson: String!
}

input EmailSubscribeChannelCreateInput {
  slug: String!
  interest_ids: [ID!]!
}

union AddTelegramChatResult = TelegramChat | ValidationError | GenericError

input AddTelegramChatInput {
  username: String
}

union AddTelegramChatByInviteLinkResult = TelegramChat | ValidationError | GenericError

input AddTelegramChatByInviteLinkInput {
  invite_link: String!
}

union DeleteTelegramChatResult = BasicResult

union UpdateTelegramChatResult = TelegramChat | ValidationError

input UpdateTelegramChatInput {
  id: ID!
  force_public: Boolean
  delisted: Boolean
  project_slug: String
}

union RefreshTelegramChatDataResult = TelegramChat

union PostToTelegramChatResult = BasicResult

input PostToTelegramChatInput {
  id: ID!
  message: String!
}

union ImportTildaPageResult = TildaPage | GenericError

input ImportTildaPageInput {
  page_id: Int!
}

input RemoveTildaPageInput {
  id: ID!
}

type OpenviduGenerateRoomTokenResult {
  token: String!
}

union CreateCommunityLeadResult = CommunityLead | ValidationError | GenericError

input CreateCommunityLeadInput {
  name: String!
  description: String
  status: String
}

union UpdateCommunityLeadResult = CommunityLead | ValidationError | GenericError

input UpdateCommunityLeadInput {
  id: ID!
  name: String
  description: String
  status: String
}

union DeleteCommunityLeadResult = BasicResult

union BecomeCommunityLeadCuratorResult = CommunityLead

input BecomeCommunityLeadCuratorInput {
  id: ID!
}

union ClearCommunityLeadCuratorResult = CommunityLead

input ClearCommunityLeadCuratorInput {
  id: ID!
}

union AddEventToCommunityLeadResult = CommunityLead

input AddEventToCommunityLeadInput {
  lead_id: ID!
  event_id: ID!
}

union RemoveEventFromCommunityLeadResult = CommunityLead

input RemoveEventFromCommunityLeadInput {
  lead_id: ID!
  event_id: ID!
}

union CommentOnCommunityLeadResult = CommunityLead

input CommentOnCommunityLeadInput {
  lead_id: ID!
  text: String!
}

union CreateCommunityInitiativeResult = CommunityInitiative | ValidationError | GenericError

input CreateCommunityInitiativeInput {
  title: String!
  description: String
}

union UpdateCommunityInitiativeResult = CommunityInitiative | ValidationError | GenericError

input UpdateCommunityInitiativeInput {
  id: ID!
  title: String
  description: String
  status: String
}

union DeleteCommunityInitiativeResult = BasicResult

union AddLeadToCommunityInitiativeResult = CommunityInitiative | GenericError | ValidationError

input AddLeadToCommunityInitiativeInput {
  initiative_id: ID!
  lead_id: ID!
}

union RemoveLeadFromCommunityInitiativeResult = CommunityInitiative | GenericError | ValidationError

input RemoveLeadFromCommunityInitiativeInput {
  initiative_id: ID!
  lead_id: ID!
}

union CommentOnCommunityInitiativeResult = CommunityInitiative

input CommentOnCommunityInitiativeInput {
  initiative_id: ID!
  text: String!
}

union EditCommentResult = Comment | GenericError

input EditCommentInput {
  id: ID!
  text: String!
}

union DeleteCommentResult = BasicResult | GenericError

input DeleteCommentInput {
  id: ID!
}

type Subscription {
  watchmenScheduleUpdates: WatchmenScheduleUpdateNotification!
  events: EventNotification!
}

type WatchmenScheduleUpdateNotification {
  updated: Boolean!
}

type EventNotification {
  type: String!
  id: ID!
}
