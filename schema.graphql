type AnalyticsBovStat {
  date: String!
  count: Int!
  total_income: Int!
}

"""
Describes the current user.

If user is not signed in, `is_authenticated` field will be false and all other fields will be empty.
"""
type AuthCurrentUser {
  is_authenticated: Boolean!
  email: String
  first_name: String
  last_name: String
  is_staff: Boolean
  permissions: [String!]!
}

type AuthGroup {
  id: ID!
  name: String!
  permissions: [AuthPermission!]!
  users: [AuthUser!]!
}

input AuthLoginCredentialsInput {
  email: String
  password: String
  token: String
}

input AuthLoginInput {
  credentials: AuthLoginCredentialsInput!
  result: String!
}

type AuthLoginResult {
  error: String
  user: AuthCurrentUser
  registered: Boolean
}

type AuthLogoutResult {
  ok: Boolean
}

type AuthPermission {
  id: ID!
  name: String!
  users: [AuthUser!]!
}

input AuthSendMagicLinkInput {
  email: String!
  next: String
}

type AuthSendMagicLinkResult {
  ok: Boolean
  error: String
}

input AuthSetMyNamesInput {
  first_name: String!
  last_name: String!
}

type AuthSetMyNamesResult {
  error: String
  ok: Boolean
}

input AuthSetPasswordInput {
  old_password: String
  new_password: String!
}

type AuthSetPasswordResult {
  error: String
  ok: Boolean
}

type AuthUser {
  id: ID!
  email: String!
  staff_member: StaffMember
}

type BasicResult {
  ok: Boolean
}

type BlogIndexPage implements WagtailPage {
  id: ID!
  meta: WagtailPageMeta!
  title: String!
  subtitle: String!
  posts: [BlogPostPage!]!
}

type BlogPostAuthor {
  name: String!
  description: String!
  image(spec: String!): WagtailImageRendition!
}

type BlogPostPage implements WagtailPage {
  id: ID!
  meta: WagtailPageMeta!
  title: String!
  date: String!
  summary: String!
  body: String!
  authors: [BlogPostAuthor!]!
}

input Cm2CreateCustomerInput {
  card_id: Int!
  first_name: String!
  last_name: String!
}

input Cm2CreateOrderInput {
  customer: ID
}

type Cm2Customer {
  id: ID!
  card_id: Int!
  first_name: String!
  last_name: String!
  orders(before: String, after: String, first: Int, last: Int): Cm2OrderConnection
}

type Cm2CustomerConnection {
  pageInfo: PageInfo!
  edges: [Cm2CustomerEdge!]!
}

type Cm2CustomerEdge {
  node: Cm2Customer!
}

type Cm2Order {
  id: ID!
  start: String!
  end: String
  customer: Cm2Customer
  value: Int!
}

type Cm2OrderConnection {
  pageInfo: PageInfo!
  edges: [Cm2OrderEdge!]!
}

type Cm2OrderEdge {
  node: Cm2Order!
}

type MastermindDatingCohort {
  id: ID!
  leader_telegram_uid: String!
  participants: [MastermindDatingParticipant!]!
  groups: [MastermindDatingGroup!]!
}

type MastermindDatingCohortMutationResult {
  cohort: MastermindDatingCohort!
}

type MastermindDatingGroup {
  id: ID!
  telegram_invite_link: String!
  participants: [MastermindDatingParticipant!]!
}

type MastermindDatingParticipant {
  id: ID!
  name: String!
  desc: String!
  voted_for: Boolean!
  present: Boolean!
  invite_email_sent: Boolean!
  photo: String
  user: AuthUser!
  cohort: MastermindDatingCohort!
}

type MastermindDatingParticipantMutationResult {
  participant: MastermindDatingParticipant!
}

type Mutation {
  _blank: Boolean
  authAddUserToGroup(group_id: ID!, user_id: ID!): Boolean
  authRemoveUserFromGroup(group_id: ID!, user_id: ID!): Boolean
  authLogin(input: AuthLoginInput!): AuthLoginResult!
  authSetPassword(input: AuthSetPasswordInput!): AuthSetPasswordResult!
  authLogout: AuthLogoutResult!
  authSendMagicLink(input: AuthSendMagicLinkInput!): AuthSendMagicLinkResult!
  authSetMyNames(input: AuthSetMyNamesInput!): AuthSetMyNamesResult!
  myPrivacyModeSet(mode: String!): Boolean
  cm2CreateOrder(input: Cm2CreateOrderInput!): Cm2Order!
  cm2CreateCustomer(input: Cm2CreateCustomerInput!): Cm2Customer!
  cm2CloseOrder(id: ID!): Boolean
  staffGrantGooglePermissionsToMember(id: ID!): Boolean
  staffFireMember(id: ID!): Boolean
  staffUnfireMember(id: ID!): Boolean
  mastermindDatingCreateCohort: MastermindDatingCohortMutationResult!
  mastermindDatingPopulateCohortFromEvent(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingSendInviteEmails(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingClearAllGroups(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingRunSolver(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingBroadcastSolution(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingDeleteCohort(cohort_id: ID!): BasicResult!
  mastermindDatingCreateGroup(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingSetEventForCohort(cohort_id: ID!, event_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingUnsetEventForCohort(cohort_id: ID!): MastermindDatingCohortMutationResult!
  mastermindDatingCreateParticipant(cohort_id: ID!, email: String!): MastermindDatingParticipantMutationResult!
  mastermindDatingActivateVoting(participant_id: ID!): MastermindDatingParticipantMutationResult!
  mastermindDatingSetPresenceStatus(participant_id: ID!, present: Boolean!): MastermindDatingParticipantMutationResult!
}

type My {
  _blank: Boolean
  user: AuthCurrentUser!
  membership: MyCmCustomer
}

type MyCmCustomer {
  card_id: Int!
  subscription_until: String
  last_visit: String
  total_spent: Int!
  privacy_mode: String!
  orders_count: Int!
  orders: [MyCmOrder!]!
}

type MyCmOrder {
  order_id: ID!
  start_dt: String!
  end_dt: String!
}

type NowCustomer {
  card_id: Int!
  first_name: String!
  last_name: String!
}

type NowInfo {
  total: Int!
  customers: [NowCustomer!]!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProjectIndexPage implements WagtailPage {
  id: ID!
  meta: WagtailPageMeta!
  title: String!
  projects: [ProjectPage!]!
}

type ProjectPage implements WagtailPage {
  id: ID!
  meta: WagtailPageMeta!
  title: String!
  summary: String!
  activity_summary: String
  is_active: Boolean!
  body: String!
  image(spec: String!): WagtailImageRendition!
}

type Query {
  _blank: Boolean
  wagtailPage(path: String, preview_token: String): WagtailPage
  wagtailPages: [WagtailPage!]!
  authGroupsAll: [AuthGroup!]!
  authPermissionsAll: [AuthPermission!]!
  now: NowInfo!
  cm2Customers(before: String, after: String, first: Int, last: Int, search: String): Cm2CustomerConnection!
  cm2Orders(before: String, after: String, first: Int, last: Int, status: String): Cm2OrderConnection!
  cm2Customer(id: ID!): Cm2Customer!
  cm2Order(id: ID!): Cm2Order!
  analyticsBovStats: [AnalyticsBovStat!]!
  staffMembersAll: [StaffMember!]!
  staffMember(id: ID!): StaffMember!
  mastermindDatingCohorts: [MastermindDatingCohort!]!
  mastermindDatingCohortById(id: ID!): MastermindDatingCohort!
  projects: [ProjectPage!]!
  my: My!
}

type SlackUser {
  slack_id: String!
  image_url: String!
}

type StaffMember {
  id: ID!
  short_name: String!
  full_name: String!
  role: String!
  is_current: Boolean!
  vk: String!
  color: String!
  user: AuthUser!
  slack_user: SlackUser
}

type Subscription {
  _blank: Boolean
}

type WagtailImage {
  id: ID!
  url: String!
  width: Int!
  height: Int!
}

type WagtailImageRendition {
  id: ID!
  url: String!
  width: Int!
  height: Int!
  original_image: WagtailImage!
}

interface WagtailPage {
  id: ID!
  title: String!
  meta: WagtailPageMeta!
}

type WagtailPageMeta {
  slug: String!
  html_url: String!
}
