// API для вызова KKMServer-а

const kktNumber = '00106107239381';

interface Credentials {
  server: string;
  user: string;
  password: string;
}

interface Cashier {
  name: string;
  inn: string;
}

export enum SignMethodCalculation {
  // Признак способа расчета. тег ОФД 1214. Для ФФД.1.05 и выше обязательное поле
  // 1: "ПРЕДОПЛАТА 100% (Полная предварительная оплата до момента передачи предмета расчета)"
  // 2: "ПРЕДОПЛАТА (Частичная предварительная оплата до момента передачи предмета расчета)"
  // 3: "АВАНС"
  // 4: "ПОЛНЫЙ РАСЧЕТ (Полная оплата, в том числе с учетом аванса в момент передачи предмета расчета)"
  // 5: "ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ (Частичная оплата предмета расчета в момент его передачи с последующей оплатой в кредит )"
  // 6: "ПЕРЕДАЧА В КРЕДИТ (Передача предмета расчета без его оплаты в момент его передачи с последующей оплатой в кредит)"
  // 7: "ОПЛАТА КРЕДИТА (Оплата предмета расчета после его передачи с оплатой в кредит )"
  PrePayment100 = 1,
  PrePayment = 2,
  Advance = 3,
  FullPayment = 4,
  PartialPaymentAndCredit = 5,
  CreditTransfer = 6,
  CreditPayment = 7,
}

interface OnlineCheck {
  email: string;
  title: string;
  sum: number;
  signMethodCalculation: SignMethodCalculation;
}

export class KKMServer {
  cashier: Cashier;
  credentials: Credentials;

  constructor() {
    this.cashier = {
      name: 'Матюхин Вячеслав Анатольевич', // Продавец, тег ОФД 1021
      inn: '761401504036', // ИНН продавца тег ОФД 1203
    };

    this.credentials = {
      server: 'https://inside.kocherga.club:5893', // HTTP адрес сервера торгового оборудования, если пусто то локальный вызов
      user: 'User', // Пользователь доступа к серверу торгового оборудования
      password: '', // Пароль доступа к серверу торгового оборудования
    };
  }

  setPassword(password: string) {
    this.credentials.password = password;
  }

  call(
    data: object, // Данные команды
    successCb: (o: object) => void, // Функция выполняемая при успешном соединении
    errorCb: (a: object) => void // Функция выполняемая при ошибке соединения
  ) {
    console.log(data);

    fetch(this.credentials.server + '/Execute', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization:
          'Basic ' +
          window.btoa(this.credentials.user + ':' + this.credentials.password),
      },
      body: JSON.stringify(data),
    })
      .then(res => res.json())
      .then((response: object) => {
        console.log(response);
        successCb(response);
        //      let MessageStatus: string = '';
        //      if (response.Status == 0) {
        //        MessageStatus = "Ok";
        //      } else if (response.Status == 1) {
        //        MessageStatus = "Выполняется";
        //      } else if (response.Status == 2) {
        //        MessageStatus = "Ошибка!";
        //      } else if (response.Status == 3) {
        //        MessageStatus = "Данные не найдены!";
        //      };
        //      // Текст ошибки
        //      MessageError = Rezult.Error;
        //
        //      //----------------------------------------------------------------------
        //      // Фискальные регистраторы
        //      //----------------------------------------------------------------------
        //      // Номер чека
        //      var MessageCheckNumber = Rezult.CheckNumber;
        //      // Номер смены
        //      var MessageSessionNumber = Rezult.SessionNumber;
        //      // Количество символов в строке
        //      var MessageLineLength = Rezult.LineLength;
        //      // Сумма наличных в ККМ
        //      var MessageAmount = Rezult.Amount;
      })
      .catch(error => errorCb({ error }));
  }

  // Генерация GUID
  guid() {
    const S4 = () => {
      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    return (
      S4() +
      S4() +
      '-' +
      S4() +
      '-' +
      S4() +
      '-' +
      S4() +
      '-' +
      S4() +
      S4() +
      S4()
    );
  }

  getTextRequest(text: string) {
    return {
      // Команда серверу
      Command: 'RegisterCheck',

      // Заводской номер ККМ для поиска.
      KktNumber: kktNumber,

      // Время (сек) ожидания выполнения команды.
      //Если За это время команда не выполнилась в статусе вернется результат "NotRun" или "Run"
      //Проверить результат еще не выполненной команды можно командой "GetRezult"
      //Если не указано или 0 - то значение по умолчанию 60 сек.
      // Поле не обязательно. Это поле можно указывать во всех командах
      Timeout: 60,

      // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
      // По этому идентификатору можно запросить результат выполнения команды
      // Поле не обязательно
      IdCommand: this.guid(),

      // Это фискальный или не фискальный чек
      IsFiscalCheck: false,

      // Тип чека;
      // 0 – продажа;                             10 – покупка;
      // 1 – возврат продажи;                     11 - возврат покупки;
      // 8 - продажа только по ЕГАИС (обычный чек ККМ не печатается)
      // 9 - возврат продажи только по ЕГАИС (обычный чек ККМ не печатается)
      TypeCheck: 0,

      // Печатать чек на бумагу
      NotPrint: false,

      // Количество копий документа
      NumberCopies: 0,

      // Продавец, тег ОФД 1021
      CashierName: 'Матюхин Вячеслав Анатольевич',

      // ИНН продавца тег ОФД 1203
      CashierVATIN: '761401504036',

      // Строки чека
      CheckStrings: [
        {
          PrintText: {
            Text: text,
            Font: 1, // 1-4, 0 - по настройкам ККМ
            Intensity: 0, // 1-15, 0 - по настройкам ККМ
          },
        },
      ],
    };
  }

  getInfoRequest() {
    return {
      Command: 'GetDataKKT',
      NumDevice: 0,
      IdCommand: this.guid(),
    };
  }

  getCheckRequest(check: OnlineCheck) {
    return {
      // Команда серверу
      Command: 'RegisterCheck',

      // Заводской номер ККМ для поиска.
      KktNumber: kktNumber,

      IdCommand: this.guid(),

      // Это фискальный или не фискальный чек
      IsFiscalCheck: true,

      // Тип чека;
      // 0 – продажа;                             10 – покупка;
      // 1 – возврат продажи;                     11 - возврат покупки;
      // 8 - продажа только по ЕГАИС (обычный чек ККМ не печатается)
      // 9 - возврат продажи только по ЕГАИС (обычный чек ККМ не печатается)
      TypeCheck: 0,

      // Не печатать чек на бумагу
      NotPrint: false, //true,
      // Количество копий документа
      NumberCopies: 0,

      CashierName: this.cashier.name,
      CashierVATIN: this.cashier.inn,

      // Телефон или е-Майл покупателя, тег ОФД 1008
      // Если чек не печатается (NotPrint = true) то указывать обязательно
      // Формат: Телефон +{Ц} или Email {С}@{C}
      ClientAddress: check.email,

      // Строки чека
      CheckStrings: [
        {
          Register: {
            // Наименование товара 64 символа
            Name: check.title,
            Quantity: 1,

            // Цена за шт. без скидки (2 знака после запятой)
            Price: check.sum,

            // Конечная сумма строки с учетом всех скидок/наценок; (2 знака после запятой)
            Amount: check.sum,

            // Отдел, по которому ведется продажа
            Department: 0,

            // НДС в процентах или ТЕГ НДС: 0 (НДС 0%), 10 (НДС 10%), 20 (НДС 20%), -1 (НДС не облагается), 120 (НДС 20/120), 110 (НДС 10/110)
            Tax: -1,

            SignMethodCalculation: check.signMethodCalculation,

            // Признак предмета расчета. тег ОФД 1212. Для ФФД.1.05 и выше обязательное поле
            // 1: "ТОВАР (наименование и иные сведения, описывающие товар)"
            // 2: "ПОДАКЦИЗНЫЙ ТОВАР (наименование и иные сведения, описывающие товар)"
            // 3: "РАБОТА (наименование и иные сведения, описывающие работу)"
            // 4: "УСЛУГА (наименование и иные сведения, описывающие услугу)"
            // 5: "СТАВКА АЗАРТНОЙ ИГРЫ (при осуществлении деятельности по проведению азартных игр)"
            // 6: "ВЫИГРЫШ АЗАРТНОЙ ИГРЫ (при осуществлении деятельности по проведению азартных игр)"
            // 7: "ЛОТЕРЕЙНЫЙ БИЛЕТ (при осуществлении деятельности по проведению лотерей)"
            // 8: "ВЫИГРЫШ ЛОТЕРЕИ (при осуществлении деятельности по проведению лотерей)"
            // 9: "ПРЕДОСТАВЛЕНИЕ РИД (предоставлении прав на использование результатов интеллектуальной деятельности или средств индивидуализации)"
            // 10: "ПЛАТЕЖ (аванс, задаток, предоплата, кредит, взнос в счет оплаты, пени, штраф, вознаграждение, бонус и иной аналогичный предмет расчета)"
            // 11: "АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ (вознаграждение (банковского)платежного агента/субагента, комиссионера, поверенного или иным агентом)"
            // 12: "СОСТАВНОЙ ПРЕДМЕТ РАСЧЕТА (предмет расчета, состоящем из предметов, каждому из которых может быть присвоено вышестоящее значение"
            // 13: "ИНОЙ ПРЕДМЕТ РАСЧЕТА (предмет расчета, не относящемуся к предметам расчета, которым может быть присвоено вышестоящее значение"
            SignCalculationObject: 4,
          },
        },
      ],

      // Наличная оплата (2 знака после запятой)
      Cash: 0,
      // Сумма электронной оплаты (2 знака после запятой)
      ElectronicPayment: check.sum,
      // Сумма из предоплаты (зачетом аванса) (2 знака после запятой)
      AdvancePayment: 0,
      // Сумма постоплатой(в кредит) (2 знака после запятой)
      Credit: 0,
      // Сумма оплаты встречным предоставлением (сертификаты, др. мат.ценности) (2 знака после запятой)
      CashProvision: 0,
    };
  }
}
