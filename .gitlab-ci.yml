before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

cache: &build_cache
  paths:
    - build.json
  policy: pull

build:
  stage: build
  script:
    - git submodule init
    - git submodule update
    - skaffold build --file-output=build.json
  cache:
    <<: *build_cache
    policy: push

test-lint:
  stage: test
  script:
    - export BACKEND_IMAGE=$(cat build.json | jq -r '.builds[] | select(.imageName | endswith("/backend")) | .tag')
    - docker run --rm "$BACKEND_IMAGE" flake8 kocherga/ --max-line-length=120
  cache:
    <<: *build_cache

test-js:
  stage: test
  script:
    - export FRONTEND_IMAGE=$(cat build.json | jq -r '.builds[] | select(.imageName | endswith("/frontend")) | .tag')
    - docker run --rm "$FRONTEND_IMAGE" npx tsc
    - docker run --rm "$FRONTEND_IMAGE" bash -c "npx jest --no-watchman --coverage"
  cache:
    <<: *build_cache

test-python:
  stage: test
  script:
    - export BACKEND_IMAGE=$(cat build.json | jq -r '.builds[] | select(.imageName | endswith("/backend")) | .tag')
    - docker run --rm
      -v "$(pwd)/ops/ci/ci.py:/code/kocherga/django/settings/main.py"
      -v "$(pwd)/ops/ci/ci_secrets.py:/code/kocherga/django/settings/ci_secrets.py"
      "$BACKEND_IMAGE"
      bash -c "pytest -m 'not google and not slack and not mailchimp and not ofd and not vk and not timepad and not slow'"
  cache:
    <<: *build_cache

deploy_production:
  stage: deploy
  variables:
    DOCKER_HOST: tcp://$DEPLOY_HOST:2376
    DOCKER_TLS_VERIFY: 1
    HOST_IP: $DEPLOY_HOST
    COMPOSE_FILE: docker/compose.prod.yml
  before_script:
    # prepare remote docker
    - mkdir -p ~/.docker
    - echo "$DOCKER_CACERT" > ~/.docker/ca.pem
    - echo "$DOCKER_CERT" > ~/.docker/cert.pem
    - echo "$DOCKER_KEY" > ~/.docker/key.pem
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # migrate and collect static
    - TODO docker-compose run --rm api ./scripts/upgrade.sh
    - skaffold deploy -a build.json --status-check
  cache:
    <<: *build_cache
  environment:
    name: production
    url: https://kocherga-club.ru
  when: manual
  only:
    - master

deploy_beta:
  stage: deploy
  variables:
    DOCKER_HOST: tcp://$DEPLOY_HOST:2376
    DOCKER_TLS_VERIFY: 1
    HOST_IP: $DEPLOY_HOST
    API_PORT: 5352
    API_ASYNC_PORT: 5351
    RENDER_SERVER_PORT: 5350
    COMPOSE_FILE: docker/compose.prod.yml
    COMPOSE_PROJECT_NAME: beta
  before_script:
    # prepare remote docker
    - mkdir -p ~/.docker
    - echo "$DOCKER_CACERT" > ~/.docker/ca.pem
    - echo "$DOCKER_CERT" > ~/.docker/cert.pem
    - echo "$DOCKER_KEY" > ~/.docker/key.pem
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # NOTE: we don't migrate the DB for beta environment (yet).
    # - docker-compose run --rm api ./scripts/upgrade.sh
    # deploy
    - TODO docker-compose up -d api api_async render-server
  cache:
    <<: *build_cache
  environment:
    name: beta
    url: https://beta.kocherga-club.ru
  only:
    - master
