before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

cache: &build_cache
  paths:
    - build.json
  policy: pull

build:
  stage: build
  script:
    - git submodule init
    - git submodule update
    - skaffold build --file-output=build.json
  cache:
    <<: *build_cache
    policy: push

test-lint:
  stage: test
  script:
    - export BACKEND_IMAGE=$(cat build.json | jq -r '.builds[] | select(.imageName | endswith("/backend")) | .tag')
    - docker run --rm "$BACKEND_IMAGE" flake8 kocherga/ --max-line-length=120
  cache:
    <<: *build_cache

test-js:
  stage: test
  script:
    - export FRONTEND_IMAGE=$(cat build.json | jq -r '.builds[] | select(.imageName | endswith("/frontend")) | .tag')
    - docker run --rm "$FRONTEND_IMAGE" npx tsc
    - docker run --rm "$FRONTEND_IMAGE" bash -c "npx jest --no-watchman --coverage"
  cache:
    <<: *build_cache

test-python:
  stage: test
  script:
    - export BACKEND_IMAGE=$(cat build.json | jq -r '.builds[] | select(.imageName | endswith("/backend")) | .tag')
    - export CHROME_IMAGE=$(cat build.json | jq -r '.builds[] | select(.imageName | endswith("/chrome")) | .tag')
    - docker-compose -f ./ops/ci/docker-compose.yml run --rm core-django bash -c "pytest -m 'not google and not slack and not mailchimp and not ofd and not vk and not timepad and not slow'"
  cache:
    <<: *build_cache

deploy_production:
  stage: deploy
  script:
    - mkdir -p ops/secrets/core/prod
    - curl -X GET -H "X-Vault-Token: $VAULT_TOKEN" https://vault.team.kocherga.club/v1/kv/data/chart-secrets/core/prod/main.yaml | jq -r .data.data.content >ops/secrets/core/prod/main.yaml
    - curl -X GET -H "X-Vault-Token: $VAULT_TOKEN" https://vault.team.kocherga.club/v1/kv/data/chart-secrets/core/prod/secrets.py | jq -r .data.data.content >ops/secrets/core/prod/secrets.py
    - curl -X GET -H "X-Vault-Token: $VAULT_TOKEN" https://vault.team.kocherga.club/v1/kv/data/chart-secrets/core/prod/KKMServer.pem | jq -r .data.data.content >ops/secrets/core/prod/KKMServer.pem
    - skaffold deploy -a build.json --status-check
  cache:
    <<: *build_cache
  environment:
    name: production
    url: https://kocherga-club.ru
  when: manual
  only:
    - master

#deploy_beta:
#  stage: deploy
#  script:
#    # NOTE: we don't migrate the DB for beta environment (yet).
#    # deploy
#    - skaffold deploy -a build.json --status-check
#  cache:
#    <<: *build_cache
#  environment:
#    name: beta
#    url: https://beta.kocherga-club.ru
#  only:
#    - master
